"""Models a single activity of a users activity feed."""
type ActivityObjectType {
  id: ID!
  targetUser: UserObjectType
  course: CourseObjectType
  resource: ResourceObjectType
  comment: CommentObjectType
  read: Boolean
  description: String
}

"""Models a badge awarded for a user, e.g `Moderator`."""
type BadgeObjectType {
  id: ID!
  name: String
  description: String
}

input ChangePasswordMutationInput {
  oldPassword: String!
  newPassword: String!
  clientMutationId: String
}

"""
Change password with a requirement of knowing the old password.

Only allowed for authenticated users that have verified their accounts.
"""
type ChangePasswordMutationPayload {
  successMessage: String
  errors: [ErrorType]
  clientMutationId: String
}

"""Models one city, e.g. Turku or Helsinki."""
type CityObjectType {
  id: ID!
  name: String
}

type CommentObjectType {
  id: ID!
  user: UserObjectType
  text: String!
  attachment: String!
  course: CourseObjectType
  resource: ResourceObjectType
  comment: CommentObjectType
  modified: DateTime!
  created: DateTime!
  replyComments: [CommentObjectType!]!
  score: Int
  vote: VoteObjectType
}

input ContactMutationInput {
  subject: String!
  name: String
  email: String!
  message: String!
  clientMutationId: String
}

"""Submit a message via the contact form."""
type ContactMutationPayload {
  subject: String!
  name: String
  email: String!
  message: String!
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

"""Models one country, e.g. Finland or Sweden."""
type CountryObjectType {
  id: ID!
  name: String
}

type CourseObjectType {
  id: ID!
  name: String!
  code: String!
  subjects: [SubjectObjectType!]!
  school: SchoolObjectType!
  user: UserObjectType
  modified: DateTime!
  created: DateTime!
  comments: [CommentObjectType!]!
  resources: [ResourceObjectType!]!
  starred: Boolean
  score: Int
  vote: VoteObjectType
  starCount: Int
  resourceCount: Int
  commentCount: Int
}

input CreateCommentMutationInput {
  text: String
  attachment: String
  course: ID
  resource: ID
  comment: ID
  user: String
  clientMutationId: String
}

"""
Create a new comment.

Attachments are popped of for unauthenticated users. The `user` field must match
with the ID of the user making the query to save the user making the query as the
author of the comment. This way even authenticated users can create anonymous
comments by setting the `user` field as `null`.
"""
type CreateCommentMutationPayload {
  comment: CommentObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input CreateCourseMutationInput {
  name: String!
  code: String
  subjects: [ID]
  school: ID!
  clientMutationId: String
}

"""
Create a new course.

Only allowed for authenticated users that have verified their accounts.
"""
type CreateCourseMutationPayload {
  course: CourseObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input CreateResourceMutationInput {
  title: String!
  file: String!
  resourceType: ID!
  course: ID!
  date: Date
  clientMutationId: String
}

"""
Create a new resource.

Only allowed for authenticated users that have verified their accounts.
"""
type CreateResourceMutationPayload {
  resource: ResourceObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input DeleteCommentMutationInput {
  id: ID
  clientMutationId: String
}

"""
Delete a comment.

Only allowed for users that are the creators of the object.

Only allowed for authenticated users.
"""
type DeleteCommentMutationPayload {
  successMessage: String
  errors: [ErrorType]
  clientMutationId: String
}

input DeleteCourseMutationInput {
  id: ID
  clientMutationId: String
}

"""
Delete a course.

Only allowed for users that are the creators of the object.

Only allowed for authenticated users.
"""
type DeleteCourseMutationPayload {
  successMessage: String
  errors: [ErrorType]
  clientMutationId: String
}

input DeleteResourceMutationInput {
  id: ID
  clientMutationId: String
}

"""
Delete a resource.

Results are sorted by creation time.

Only allowed for users that are the creators of the object.

Only allowed for authenticated users that have verified their accounts.
"""
type DeleteResourceMutationPayload {
  successMessage: String
  errors: [ErrorType]
  clientMutationId: String
}

input DeleteUserMutationInput {
  password: String!
  clientMutationId: String
}

"""
Permanently delete the account.

The user must confirm his password.

Only allowed for authenticated users.
"""
type DeleteUserMutationPayload {
  successMessage: String
  errors: [ErrorType]
  clientMutationId: String
}

input DownloadResourceMutationInput {
  id: ID
  clientMutationId: String
}

"""
Download a resource.

This mutation only increments the amount of downloads of a single resource.
"""
type DownloadResourceMutationPayload {
  resource: ResourceObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

type ErrorType {
  field: String!
  messages: [String!]!
}

input LoginMutationInput {
  usernameOrEmail: String!
  password: String!
  clientMutationId: String
}

"""
Obtain JSON web token and user information.

Non-verified users can still login.
"""
type LoginMutationPayload {
  user: UserObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

"""
Delete JSON web token cookie and logout.

This sets the `Set-Cookie` header so that the JWT token cookie gets automatically
deleted in frontend.
"""
type LogoutMutation {
  deleted: Boolean!
}

input MarkActivityAsReadMutationInput {
  read: Boolean
  id: ID
  clientMutationId: String
}

"""
Mark a single activity read/unread.

Only allowed for users that are the creators of the object.

Only allowed for authenticated users.
"""
type MarkActivityAsReadMutationPayload {
  activity: ActivityObjectType
  errors: [ErrorType]
  clientMutationId: String
}

"""
Mark all activities of the given user as read.

Only allowed for authenticated users.
"""
type MarkAllActivitiesAsReadMutation {
  errors: [ErrorType]
  activities: PaginatedActivityObjectType
}

type Mutation {
  """
  Start a course or a resource remove the star if it already exists.
  
  Only allowed for authenticated users that have verified their accounts.
  """
  star(input: StarMutationInput!): StarMutationPayload

  """
  Upvote, downvote or remove a vote from a course, resource or a comment.
  
  Only allowed for authenticated users that have verified their accounts.
  """
  vote(input: VoteMutationInput!): VoteMutationPayload

  """
  Register a new user.
  
  Check if there is an existing user with that email or username. Check that account
  is not deactivated. By default, set the user's account as unverified. After
  successful registration, send account verification email.
  """
  register(input: RegisterMutationInput!): RegisterMutationPayload

  """
  Receive the token that was sent by email.
  
  If the token is valid, verify the user's account.
  """
  verifyAccount(input: VerifyAccountMutationInput!): VerifyAccountMutationPayload

  """
  Send the verification email again.
  
  Return an error in the following cases:
  - A user account with the provided email address was not found.
  - An unknown error while sending the email occurred.
  - The user has already verified one's account.
  """
  resendVerificationEmail(input: ResendVerificationEmailMutationInput!): ResendVerificationEmailMutationPayload

  """
  Send password reset email.
  
  For non-verified users, send a verification email instead and
  return an according error message.
  
  Return an error in the following cases:
  - A user account with the provided email address was not found.
  - An unknown error while sending the email occurred.
  """
  sendPasswordResetEmail(input: SendPasswordResetEmailMutationInput!): SendPasswordResetEmailMutationPayload

  """
  Change user's password without knowing the old password.
  
  Receive the token that was sent by email. Revoke refresh token and require the user
  to log in again with one's new password.
  """
  resetPassword(input: ResetPasswordMutationInput!): ResetPasswordMutationPayload

  """
  Obtain JSON web token and user information.
  
  Non-verified users can still login.
  """
  login(input: LoginMutationInput!): LoginMutationPayload

  """
  Delete JSON web token cookie and logout.
  
  This sets the `Set-Cookie` header so that the JWT token cookie gets automatically
  deleted in frontend.
  """
  logout: LogoutMutation

  """
  Change password with a requirement of knowing the old password.
  
  Only allowed for authenticated users that have verified their accounts.
  """
  changePassword(input: ChangePasswordMutationInput!): ChangePasswordMutationPayload

  """
  Update some user model fields.
  
  Only allowed for authenticated users.
  """
  updateUser(input: UpdateUserMutationInput!): UpdateUserMutationPayload

  """
  Permanently delete the account.
  
  The user must confirm his password.
  
  Only allowed for authenticated users.
  """
  deleteUser(input: DeleteUserMutationInput!): DeleteUserMutationPayload

  """
  Create a new resource.
  
  Only allowed for authenticated users that have verified their accounts.
  """
  createResource(input: CreateResourceMutationInput!): CreateResourceMutationPayload

  """
  Update a resource.
  
  Only allowed for users that are the creators of the object.
  
  Only allowed for authenticated users that have verified their accounts.
  """
  updateResource(input: UpdateResourceMutationInput!): UpdateResourceMutationPayload

  """
  Delete a resource.
  
  Results are sorted by creation time.
  
  Only allowed for users that are the creators of the object.
  
  Only allowed for authenticated users that have verified their accounts.
  """
  deleteResource(input: DeleteResourceMutationInput!): DeleteResourceMutationPayload

  """
  Download a resource.
  
  This mutation only increments the amount of downloads of a single resource.
  """
  downloadResource(input: DownloadResourceMutationInput!): DownloadResourceMutationPayload

  """
  Email the current user with a zip file containing **all** of their data.
  """
  myData: MyDataMutation

  """
  Create a new course.
  
  Only allowed for authenticated users that have verified their accounts.
  """
  createCourse(input: CreateCourseMutationInput!): CreateCourseMutationPayload

  """
  Delete a course.
  
  Only allowed for users that are the creators of the object.
  
  Only allowed for authenticated users.
  """
  deleteCourse(input: DeleteCourseMutationInput!): DeleteCourseMutationPayload

  """Submit a message via the contact form."""
  createContactMessage(input: ContactMutationInput!): ContactMutationPayload

  """
  Create a new comment.
  
  Attachments are popped of for unauthenticated users. The `user` field must match
  with the ID of the user making the query to save the user making the query as the
  author of the comment. This way even authenticated users can create anonymous
  comments by setting the `user` field as `null`.
  """
  createComment(input: CreateCommentMutationInput!): CreateCommentMutationPayload

  """
  Update an existing comment.
  
  Only allowed for users that are the creators of the object.
  
  Only allowed for authenticated users.
  """
  updateComment(input: UpdateCommentMutationInput!): UpdateCommentMutationPayload

  """
  Delete a comment.
  
  Only allowed for users that are the creators of the object.
  
  Only allowed for authenticated users.
  """
  deleteComment(input: DeleteCommentMutationInput!): DeleteCommentMutationPayload

  """
  Mark a single activity read/unread.
  
  Only allowed for users that are the creators of the object.
  
  Only allowed for authenticated users.
  """
  markActivityAsRead(input: MarkActivityAsReadMutationInput!): MarkActivityAsReadMutationPayload

  """
  Mark all activities of the given user as read.
  
  Only allowed for authenticated users.
  """
  markAllActivitiesAsRead: MarkAllActivitiesAsReadMutation
}

"""
Email the current user with a zip file containing **all** of their data.
"""
type MyDataMutation {
  successMessage: String
  errors: [ErrorType]
}

"""
Models a single activity of a users activity feed.

Results are paginated.
"""
type PaginatedActivityObjectType {
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  count: Int
  objects: [ActivityObjectType]
}

"""
Models one course.

Results are paginated.
"""
type PaginatedCourseObjectType {
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  count: Int
  objects: [CourseObjectType]
}

"""
Models one user-uploaded resource.

Results are paginated.
"""
type PaginatedResourceObjectType {
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  count: Int
  objects: [ResourceObjectType]
}

"""
Models one studyable subject, e.g. Computer Engineering.

Results are paginated.
"""
type PaginatedSubjectObjectType {
  page: Int
  pages: Int
  hasNext: Boolean
  hasPrev: Boolean
  count: Int
  objects: [SubjectObjectType]
}

type Query {
  """
  Return user profile of the user making the query.
  
  Only allowed for authenticated users.
  """
  userMe: UserObjectType

  """
  Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead.
  
  Superusers cannot be queried.
  """
  user(id: ID): UserObjectType

  """
  Filter results based on the school ID.
  
  Results are sorted by amount of courses.
  
  Results are paginated.
  """
  subjects(school: ID, page: Int, pageSize: Int): PaginatedSubjectObjectType

  """
  Return limited amount of results for autocomplete fields.
  
  Results are sorted by amount of courses.
  """
  autocompleteSubjects(name: String): [SubjectObjectType]

  """
  Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead.
  """
  subject(id: ID): SubjectObjectType

  """
  Return limited amount of results for autocomplete fields.
  
  Results are sorted by creation time.
  """
  autocompleteSchoolTypes: [SchoolTypeObjectType]

  """
  Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead.
  """
  schoolType(id: ID): SchoolTypeObjectType

  """
  Return limited amount of results for autocomplete fields.
  
  Results are sorted by creation time.
  """
  autocompleteSchools(name: String): [SchoolObjectType]

  """
  Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead.
  """
  school(id: ID): SchoolObjectType

  """
  Return unlimited amount of resource types.
  
  Results are sorted by creation time.
  """
  resourceTypes: [ResourceTypeObjectType]

  """
  Return limited amount of results for autocomplete fields.
  
  Results are sorted alphabetically.
  """
  autocompleteResourceTypes: [ResourceTypeObjectType]

  """
  Return resources filtered by query params.
  
  Results are sorted by creation time.
  
  Results are paginated.
  """
  resources(user: ID, course: ID, page: Int, pageSize: Int, ordering: String): PaginatedResourceObjectType

  """
  Return starred resources of the user making the query.
  
  Results are sorted by creation time.
  
  Only allowed for authenticated users.
  
  Results are paginated.
  """
  starredResources(page: Int, pageSize: Int): PaginatedResourceObjectType

  """
  Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead.
  """
  resource(id: ID): ResourceObjectType

  """
  Return courses filtered by query params.
  
  Results are sorted either manually based on query params or by secret Skole AI-
  powered algorithms.
  
  Results are paginated.
  """
  courses(courseName: String, courseCode: String, subject: ID, school: ID, schoolType: ID, country: ID, city: ID, user: ID, page: Int, pageSize: Int, ordering: String): PaginatedCourseObjectType

  """
  Return limited amount of results for autocomplete fields.
  
  Results are sorted by secret Skole AI-powered algorithms.
  """
  autocompleteCourses(school: ID, name: String): [CourseObjectType]

  """
  Return starred courses of the user making the query.
  
  Results are sorted by creation time. Return an empty list for unauthenticated
  users.
  
  Only allowed for authenticated users.
  
  Results are paginated.
  """
  starredCourses(page: Int, pageSize: Int): PaginatedCourseObjectType

  """
  Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead.
  """
  course(id: ID): CourseObjectType

  """Return limited amount of results for autocomplete fields."""
  autocompleteCountries: [CountryObjectType]

  """
  Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead.
  """
  country(id: ID): CountryObjectType

  """
  Return limited amount of results for autocomplete fields.
  
  Results are sorted alphabetically.
  """
  autocompleteCities: [CityObjectType]

  """
  Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead.
  """
  city(id: ID): CityObjectType

  """
  Return all activity of to the user making the query.
  
  Results are sorted by creation time.
  
  Only allowed for authenticated users.
  
  Results are paginated.
  """
  activities(page: Int, pageSize: Int): PaginatedActivityObjectType

  """
  Return limited amount of activity of user making the query for a preview.
  
  Only allowed for authenticated users.
  """
  activityPreview: [ActivityObjectType]
}

input RegisterMutationInput {
  username: String!
  email: String!
  password: String!
  clientMutationId: String
}

"""
Register a new user.

Check if there is an existing user with that email or username. Check that account
is not deactivated. By default, set the user's account as unverified. After
successful registration, send account verification email.
"""
type RegisterMutationPayload {
  successMessage: String
  errors: [ErrorType]
  clientMutationId: String
}

input ResendVerificationEmailMutationInput {
  email: String!
  clientMutationId: String
}

"""
Send the verification email again.

Return an error in the following cases:
- A user account with the provided email address was not found.
- An unknown error while sending the email occurred.
- The user has already verified one's account.
"""
type ResendVerificationEmailMutationPayload {
  email: String!
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input ResetPasswordMutationInput {
  token: String
  newPassword: String!
  clientMutationId: String
}

"""
Change user's password without knowing the old password.

Receive the token that was sent by email. Revoke refresh token and require the user
to log in again with one's new password.
"""
type ResetPasswordMutationPayload {
  token: String
  newPassword: String!
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

type ResourceObjectType {
  id: ID!
  resourceType: ResourceTypeObjectType
  title: String!
  file: String!
  date: Date!
  course: CourseObjectType!
  downloads: Int!
  user: UserObjectType
  modified: DateTime!
  created: DateTime!
  comments: [CommentObjectType!]!
  starred: Boolean
  score: Int
  vote: VoteObjectType
  school: SchoolObjectType
  starCount: Int
  commentCount: Int
}

"""Models one type of resource, e.g. an exam or a note."""
type ResourceTypeObjectType {
  id: ID!
  name: String
}

"""Models one school on the platform."""
type SchoolObjectType {
  id: ID!
  schoolType: SchoolTypeObjectType
  city: CityObjectType
  courses: [CourseObjectType!]!
  name: String
  country: CountryObjectType
  subjects: [SubjectObjectType]
}

"""Models one type of school, e.g. University of High School."""
type SchoolTypeObjectType {
  id: ID!
  name: String
}

input SendPasswordResetEmailMutationInput {
  email: String!
  clientMutationId: String
}

"""
Send password reset email.

For non-verified users, send a verification email instead and
return an according error message.

Return an error in the following cases:
- A user account with the provided email address was not found.
- An unknown error while sending the email occurred.
"""
type SendPasswordResetEmailMutationPayload {
  email: String!
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input StarMutationInput {
  course: ID
  resource: ID
  clientMutationId: String
}

"""
Start a course or a resource remove the star if it already exists.

Only allowed for authenticated users that have verified their accounts.
"""
type StarMutationPayload {
  star: StarObjectType
  errors: [ErrorType]
  starred: Boolean
  clientMutationId: String
}

"""Models a star that a user has placed on a course or a resource."""
type StarObjectType {
  deletedAt: DateTime
  id: ID!
  user: UserObjectType!
  course: CourseObjectType
  resource: ResourceObjectType
}

"""Models one studyable subject, e.g. Computer Engineering."""
type SubjectObjectType {
  id: ID!
  name: String
  courseCount: Int
  resourceCount: Int
}

input UpdateCommentMutationInput {
  text: String
  attachment: String
  id: ID
  clientMutationId: String
}

"""
Update an existing comment.

Only allowed for users that are the creators of the object.

Only allowed for authenticated users.
"""
type UpdateCommentMutationPayload {
  comment: CommentObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input UpdateResourceMutationInput {
  title: String!
  resourceType: ID!
  date: Date
  id: ID
  clientMutationId: String
}

"""
Update a resource.

Only allowed for users that are the creators of the object.

Only allowed for authenticated users that have verified their accounts.
"""
type UpdateResourceMutationPayload {
  resource: ResourceObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input UpdateUserMutationInput {
  username: String!
  email: String!
  title: String
  bio: String
  avatar: String
  school: ID
  subject: ID
  clientMutationId: String
}

"""
Update some user model fields.

Only allowed for authenticated users.
"""
type UpdateUserMutationPayload {
  user: UserObjectType
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

"""
Models one user on the platform.

The following fields are private, meaning they are returned only if the user is
querying one's own profile: `email`, `verified`, `school`, `subject`.

For instances that are not the user's own user profile, these fields will return a
`null` value.
"""
type UserObjectType {
  id: ID!
  username: String!
  email: String
  title: String!
  bio: String!
  avatar: String
  score: Int
  created: DateTime!
  verified: Boolean
  avatarThumbnail: String
  school: SchoolObjectType
  subject: SubjectObjectType
  rank: String
  badges: [BadgeObjectType]
  unreadActivityCount: Int
}

input VerifyAccountMutationInput {
  token: String
  clientMutationId: String
}

"""
Receive the token that was sent by email.

If the token is valid, verify the user's account.
"""
type VerifyAccountMutationPayload {
  token: String
  errors: [ErrorType]
  successMessage: String
  clientMutationId: String
}

input VoteMutationInput {
  status: Int!
  comment: ID
  course: ID
  resource: ID
  clientMutationId: String
}

"""
Upvote, downvote or remove a vote from a course, resource or a comment.

Only allowed for authenticated users that have verified their accounts.
"""
type VoteMutationPayload {
  vote: VoteObjectType
  errors: [ErrorType]
  targetScore: Int
  clientMutationId: String
}

"""Models one vote on either comment, course or resource."""
type VoteObjectType {
  id: ID!
  user: UserObjectType
  status: Int
  comment: CommentObjectType
  course: CourseObjectType
  resource: ResourceObjectType
}

