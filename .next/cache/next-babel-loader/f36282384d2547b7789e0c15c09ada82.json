{"ast":null,"code":"var _jsxFileName = \"/Users/blomqma/projects/skole/frontend/molecules/IntersectingWrapper.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Animated } from '../atoms';\nexport var IntersectingWrapper = function IntersectingWrapper(_ref) {\n  var children = _ref.children,\n      time = _ref.time;\n  var element = useRef(null);\n\n  var _useState = useState(false),\n      isIntersecting = _useState[0],\n      setIsIntersecting = _useState[1];\n\n  useEffect(function () {\n    var node = element.current;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var isIntersecting = entry.isIntersecting;\n\n        if (!!element && !!element.current) {\n          if (isIntersecting) {\n            setIsIntersecting(true);\n            observer.unobserve(element.current);\n          }\n        }\n      });\n    });\n\n    if (node) {\n      observer.observe(node);\n    }\n\n    return function () {\n      if (node) {\n        observer.unobserve(node);\n      }\n    };\n  }, [element]);\n  return __jsx(Animated, {\n    launch: isIntersecting,\n    time: !!time ? time : 1,\n    ref: element,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/blomqma/projects/skole/frontend/molecules/IntersectingWrapper.tsx"],"names":["IntersectingWrapper","children","time","element","useRef","isIntersecting","setIsIntersecting","useState","useEffect","node","observer","entries","entry"],"mappings":";;AAAA,OAAA,KAAA,IAAA,SAAA,EAAA,MAAA,EAAA,QAAA,QAAA,OAAA;AACA,SAAA,QAAA,QAAA,UAAA;AAOA,OAAO,IAAMA,mBAAoC,GAAG,SAAvCA,mBAAuC,CAAA,IAAA,EAAwB;AAAA,MAArBC,QAAqB,GAAA,IAAA,CAArBA,QAAqB;AAAA,MAAXC,IAAW,GAAA,IAAA,CAAXA,IAAW;AACxE,MAAMC,OAAO,GAAGC,MAAM,CAAtB,IAAsB,CAAtB;;AADwE,MAAA,SAAA,GAE5BG,QAAQ,CAFoB,KAEpB,CAFoB;AAAA,MAEjEF,cAFiE,GAAA,SAAA,CAAA,CAAA,CAAA;AAAA,MAEjDC,iBAFiD,GAAA,SAAA,CAAA,CAAA,CAAA;;AAIxEE,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIC,IAAI,GAAGN,OAAO,CAAlB,OAAA;AACA,QAAMO,QAAQ,GAAG,IAAA,oBAAA,CAAyB,UAAA,OAAA,EAAW;AACjDC,MAAAA,OAAO,CAAPA,OAAAA,CAAgB,UAAA,KAAA,EAAS;AAAA,YACbN,cADa,GACMO,KADN,CAAA,cAAA;;AAErB,YAAI,CAAC,CAAD,OAAA,IAAa,CAAC,CAACT,OAAO,CAA1B,OAAA,EAAoC;AAChC,cAAA,cAAA,EAAoB;AAChBG,YAAAA,iBAAiB,CAAjBA,IAAiB,CAAjBA;AACAI,YAAAA,QAAQ,CAARA,SAAAA,CAAmBP,OAAO,CAA1BO,OAAAA;AACH;AACJ;AAPLC,OAAAA;AADJ,KAAiB,CAAjB;;AAWA,QAAA,IAAA,EAAU;AACND,MAAAA,QAAQ,CAARA,OAAAA,CAAAA,IAAAA;AACH;;AACD,WAAO,YAAM;AACT,UAAA,IAAA,EAAU;AACNA,QAAAA,QAAQ,CAARA,SAAAA,CAAAA,IAAAA;AACH;AAHL,KAAA;AAhBK,GAAA,EAqBN,CArBHF,OAqBG,CArBM,CAATA;AAuBA,SACI,KAAA,CAAA,QAAA,EAAA;AACI,IAAA,MAAM,EADV,cAAA;AAEI,IAAA,IAAI,EAAE,CAAC,CAAD,IAAA,GAAA,IAAA,GAFV,CAAA;AAGI,IAAA,GAAG,EAHP,OAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA;AAAA,KAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GAAA,EADJ,QACI,CADJ;AA3BG,CAAA","sourcesContent":["import React, { ReactChild, useEffect, useRef, useState } from 'react';\nimport { Animated } from '../atoms';\n\ninterface Props {\n    children: ReactChild;\n    time?: number;\n}\n\nexport const IntersectingWrapper: React.FC<Props> = ({ children, time }) => {\n    const element = useRef<HTMLInputElement>(null);\n    const [isIntersecting, setIsIntersecting] = useState(false);\n\n    useEffect(() => {\n        let node = element.current;\n        const observer = new IntersectionObserver(entries => {\n            entries.forEach(entry => {\n                const { isIntersecting } = entry;\n                if (!!element && !!element.current) {\n                    if (isIntersecting) {\n                        setIsIntersecting(true);\n                        observer.unobserve(element.current);\n                    }\n                }\n            });\n        });\n        if (node) {\n            observer.observe(node);\n        }\n        return () => {\n            if (node) {\n                observer.unobserve(node);\n            }\n        };\n    }, [element]);\n\n    return (\n        <Animated\n            launch={isIntersecting}\n            time={!!time ? time : 1}\n            ref={element}\n        >\n            {children}\n        </Animated>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}