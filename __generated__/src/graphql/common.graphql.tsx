/* c397b6031885e5b11ea266e7e48af3660422c314
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /**
   * The `DateTime` scalar type represents a DateTime
   * value as specified by
   * [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
   */
  DateTime: any;
  /**
   * The `Date` scalar type represents a Date
   * value as specified by
   * [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
   */
  Date: any;
};

export type Query = {
  __typename?: 'Query';
  /**
   * Return comments filtered by query params.
   * 
   * Results are paginated.
   */
  comments?: Maybe<PaginatedCommentObjectType>;
  /** Return comments filtered by query params. */
  discussion?: Maybe<Array<Maybe<CommentObjectType>>>;
  /**
   * Return suggested courses, resources and comments based on secret Skole AI-
   * powered algorithms.
   */
  suggestions?: Maybe<Array<Maybe<SuggestionsUnion>>>;
  /** Return preview of the suggestions. */
  suggestionsPreview?: Maybe<Array<Maybe<SuggestionsUnion>>>;
  /**
   * Return user profile of the user making the query.
   * 
   * Only allowed for authenticated users.
   */
  userMe?: Maybe<UserObjectType>;
  /**
   * Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead.
   * 
   * Superusers cannot be queried.
   */
  user?: Maybe<UserObjectType>;
  /**
   * Filter results based on the school ID.
   * 
   * Results are sorted alphabetically.
   * 
   * Results are paginated.
   */
  subjects?: Maybe<PaginatedSubjectObjectType>;
  /**
   * Return limited amount of results for autocomplete fields.
   * 
   * Results are sorted alphabetically.
   */
  autocompleteSubjects?: Maybe<Array<Maybe<SubjectObjectType>>>;
  /** Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead. */
  subject?: Maybe<SubjectObjectType>;
  /** Return the dynamic page IDs that frontend needs to build a `sitemap.xml`. */
  sitemap?: Maybe<SitemapObjectType>;
  /**
   * Return limited amount of results for autocomplete fields.
   * 
   * Results are sorted by creation time.
   */
  autocompleteSchoolTypes?: Maybe<Array<Maybe<SchoolTypeObjectType>>>;
  /** Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead. */
  schoolType?: Maybe<SchoolTypeObjectType>;
  /**
   * Return limited amount of results for autocomplete fields.
   * 
   * Results are sorted alphabetically.
   */
  autocompleteSchools?: Maybe<Array<Maybe<SchoolObjectType>>>;
  /** Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead. */
  school?: Maybe<SchoolObjectType>;
  resourceTypes?: Maybe<Array<Maybe<ResourceTypeObjectType>>>;
  /**
   * Return limited amount of results for autocomplete fields.
   * 
   * Results are sorted by creation time.
   */
  autocompleteResourceTypes?: Maybe<Array<Maybe<ResourceTypeObjectType>>>;
  /**
   * Return resources filtered by query params.
   * 
   * Results are sorted by creation time.
   * 
   * Results are paginated.
   */
  resources?: Maybe<PaginatedResourceObjectType>;
  /**
   * Return starred resources of the user making the query.
   * 
   * Results are sorted by creation time.
   * 
   * Only allowed for authenticated users.
   * 
   * Results are paginated.
   */
  starredResources?: Maybe<PaginatedResourceObjectType>;
  /** Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead. */
  resource?: Maybe<ResourceObjectType>;
  /**
   * Return courses filtered by query params.
   * 
   * The `search_term` can be either the course name or the course code.
   * 
   * Results are sorted either manually based on query params or by secret Skole AI-
   * powered algorithms.
   * 
   * Results are paginated.
   */
  courses?: Maybe<PaginatedCourseObjectType>;
  /**
   * Return limited amount of results for autocomplete fields.
   * 
   * Results are sorted by secret Skole AI-powered algorithms.
   */
  autocompleteCourses?: Maybe<Array<Maybe<CourseObjectType>>>;
  /**
   * Return starred courses of the user making the query.
   * 
   * Results are sorted by creation time. Return an empty list for unauthenticated
   * users.
   * 
   * Only allowed for authenticated users.
   * 
   * Results are paginated.
   */
  starredCourses?: Maybe<PaginatedCourseObjectType>;
  /** Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead. */
  course?: Maybe<CourseObjectType>;
  /**
   * Return limited amount of results for autocomplete fields.
   * 
   * Results are sorted alphabetically.
   */
  autocompleteCountries?: Maybe<Array<Maybe<CountryObjectType>>>;
  /** Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead. */
  country?: Maybe<CountryObjectType>;
  /**
   * Return limited amount of results for autocomplete fields.
   * 
   * Results are sorted alphabetically.
   */
  autocompleteCities?: Maybe<Array<Maybe<CityObjectType>>>;
  /** Return a single object based on the ID. If an object is not found or it has been soft deleted, return `null` instead. */
  city?: Maybe<CityObjectType>;
  /**
   * Return all activity of to the user making the query.
   * 
   * Results are sorted by creation time.
   * 
   * Only allowed for authenticated users.
   * 
   * Results are paginated.
   */
  activities?: Maybe<PaginatedActivityObjectType>;
  /**
   * Return limited amount of activity of user making the query for a preview.
   * 
   * Only allowed for authenticated users.
   */
  activityPreview?: Maybe<Array<Maybe<ActivityObjectType>>>;
};


export type QueryCommentsArgs = {
  user?: Maybe<Scalars['ID']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryDiscussionArgs = {
  course?: Maybe<Scalars['ID']>;
  resource?: Maybe<Scalars['ID']>;
};


export type QueryUserArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QuerySubjectsArgs = {
  school?: Maybe<Scalars['ID']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryAutocompleteSubjectsArgs = {
  name?: Maybe<Scalars['String']>;
};


export type QuerySubjectArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QuerySchoolTypeArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryAutocompleteSchoolsArgs = {
  name?: Maybe<Scalars['String']>;
};


export type QuerySchoolArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryResourcesArgs = {
  user?: Maybe<Scalars['ID']>;
  course?: Maybe<Scalars['ID']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  ordering?: Maybe<Scalars['String']>;
};


export type QueryStarredResourcesArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryResourceArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryCoursesArgs = {
  searchTerm?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['ID']>;
  school?: Maybe<Scalars['ID']>;
  schoolType?: Maybe<Scalars['ID']>;
  country?: Maybe<Scalars['ID']>;
  city?: Maybe<Scalars['ID']>;
  user?: Maybe<Scalars['ID']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  ordering?: Maybe<Scalars['String']>;
};


export type QueryAutocompleteCoursesArgs = {
  school?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};


export type QueryStarredCoursesArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryCourseArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryCountryArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryCityArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryActivitiesArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};

/**
 * Models one comment posted on a comment thread.
 * 
 * Results are paginated.
 */
export type PaginatedCommentObjectType = {
  __typename?: 'PaginatedCommentObjectType';
  page?: Maybe<Scalars['Int']>;
  pages?: Maybe<Scalars['Int']>;
  hasNext?: Maybe<Scalars['Boolean']>;
  hasPrev?: Maybe<Scalars['Boolean']>;
  count?: Maybe<Scalars['Int']>;
  objects?: Maybe<Array<Maybe<CommentObjectType>>>;
};

export type CommentObjectType = {
  __typename?: 'CommentObjectType';
  id: Scalars['ID'];
  user?: Maybe<UserObjectType>;
  text: Scalars['String'];
  attachment: Scalars['String'];
  course?: Maybe<CourseObjectType>;
  resource?: Maybe<ResourceObjectType>;
  comment?: Maybe<CommentObjectType>;
  modified: Scalars['DateTime'];
  created: Scalars['DateTime'];
  replyComments: Array<CommentObjectType>;
  score?: Maybe<Scalars['Int']>;
  vote?: Maybe<VoteObjectType>;
  replyCount?: Maybe<Scalars['Int']>;
  attachmentThumbnail?: Maybe<Scalars['String']>;
};

/**
 * Models one user on the platform.
 * 
 * The following fields are private, meaning they are returned only if the user is
 * querying one's own profile: `email`, `verified`, `school`, `subject`.
 * 
 * For instances that are not the user's own user profile, these fields will return a
 * `null` value.
 */
export type UserObjectType = {
  __typename?: 'UserObjectType';
  id: Scalars['ID'];
  username: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  bio: Scalars['String'];
  avatar?: Maybe<Scalars['String']>;
  score?: Maybe<Scalars['Int']>;
  created: Scalars['DateTime'];
  verified?: Maybe<Scalars['Boolean']>;
  avatarThumbnail?: Maybe<Scalars['String']>;
  school?: Maybe<SchoolObjectType>;
  subject?: Maybe<SubjectObjectType>;
  rank?: Maybe<Scalars['String']>;
  badges?: Maybe<Array<Maybe<BadgeObjectType>>>;
  unreadActivityCount?: Maybe<Scalars['Int']>;
};


/** Models one school on the platform. */
export type SchoolObjectType = {
  __typename?: 'SchoolObjectType';
  id: Scalars['ID'];
  schoolType?: Maybe<SchoolTypeObjectType>;
  city?: Maybe<CityObjectType>;
  courses: Array<CourseObjectType>;
  name?: Maybe<Scalars['String']>;
  country?: Maybe<CountryObjectType>;
  subjects?: Maybe<Array<Maybe<SubjectObjectType>>>;
};

/** Models one type of school, e.g. University of High School. */
export type SchoolTypeObjectType = {
  __typename?: 'SchoolTypeObjectType';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

/** Models one city, e.g. Turku or Helsinki. */
export type CityObjectType = {
  __typename?: 'CityObjectType';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

export type CourseObjectType = {
  __typename?: 'CourseObjectType';
  id: Scalars['ID'];
  name: Scalars['String'];
  code: Scalars['String'];
  subjects: Array<SubjectObjectType>;
  school: SchoolObjectType;
  user?: Maybe<UserObjectType>;
  modified: Scalars['DateTime'];
  created: Scalars['DateTime'];
  comments: Array<CommentObjectType>;
  resources: Array<ResourceObjectType>;
  starred?: Maybe<Scalars['Boolean']>;
  score?: Maybe<Scalars['Int']>;
  vote?: Maybe<VoteObjectType>;
  starCount?: Maybe<Scalars['Int']>;
  resourceCount?: Maybe<Scalars['Int']>;
  commentCount?: Maybe<Scalars['Int']>;
};

/** Models one studyable subject, e.g. Computer Engineering. */
export type SubjectObjectType = {
  __typename?: 'SubjectObjectType';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  courseCount?: Maybe<Scalars['Int']>;
  resourceCount?: Maybe<Scalars['Int']>;
};

export type ResourceObjectType = {
  __typename?: 'ResourceObjectType';
  id: Scalars['ID'];
  resourceType?: Maybe<ResourceTypeObjectType>;
  title: Scalars['String'];
  file: Scalars['String'];
  date: Scalars['Date'];
  course: CourseObjectType;
  downloads: Scalars['Int'];
  user?: Maybe<UserObjectType>;
  author?: Maybe<AuthorObjectType>;
  modified: Scalars['DateTime'];
  created: Scalars['DateTime'];
  comments: Array<CommentObjectType>;
  starred?: Maybe<Scalars['Boolean']>;
  score?: Maybe<Scalars['Int']>;
  vote?: Maybe<VoteObjectType>;
  school?: Maybe<SchoolObjectType>;
  starCount?: Maybe<Scalars['Int']>;
  commentCount?: Maybe<Scalars['Int']>;
};

/** Models one type of resource, e.g. an exam or a note. */
export type ResourceTypeObjectType = {
  __typename?: 'ResourceTypeObjectType';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};


/** Models the author (=copyright owner) of a resource. */
export type AuthorObjectType = {
  __typename?: 'AuthorObjectType';
  id: Scalars['ID'];
  name: Scalars['String'];
  user?: Maybe<UserObjectType>;
};

/** Models one vote on either comment, course or resource. */
export type VoteObjectType = {
  __typename?: 'VoteObjectType';
  id: Scalars['ID'];
  user?: Maybe<UserObjectType>;
  status?: Maybe<Scalars['Int']>;
  comment?: Maybe<CommentObjectType>;
  course?: Maybe<CourseObjectType>;
  resource?: Maybe<ResourceObjectType>;
};

/** Models one country, e.g. Finland or Sweden. */
export type CountryObjectType = {
  __typename?: 'CountryObjectType';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

/** Models a badge awarded for a user, e.g `Moderator`. */
export type BadgeObjectType = {
  __typename?: 'BadgeObjectType';
  id: Scalars['ID'];
  name: Scalars['String'];
  description: Scalars['String'];
};

export type SuggestionsUnion = CourseObjectType | ResourceObjectType | CommentObjectType;

/**
 * Models one studyable subject, e.g. Computer Engineering.
 * 
 * Results are paginated.
 */
export type PaginatedSubjectObjectType = {
  __typename?: 'PaginatedSubjectObjectType';
  page?: Maybe<Scalars['Int']>;
  pages?: Maybe<Scalars['Int']>;
  hasNext?: Maybe<Scalars['Boolean']>;
  hasPrev?: Maybe<Scalars['Boolean']>;
  count?: Maybe<Scalars['Int']>;
  objects?: Maybe<Array<Maybe<SubjectObjectType>>>;
};

export type SitemapObjectType = {
  __typename?: 'SitemapObjectType';
  courses: Array<SitemapEntryObjectType>;
  resources: Array<SitemapEntryObjectType>;
  schools: Array<SitemapEntryObjectType>;
  users: Array<SitemapEntryObjectType>;
};

export type SitemapEntryObjectType = {
  __typename?: 'SitemapEntryObjectType';
  id: Scalars['ID'];
  modified?: Maybe<Scalars['DateTime']>;
};

/**
 * Models one user-uploaded resource.
 * 
 * Results are paginated.
 */
export type PaginatedResourceObjectType = {
  __typename?: 'PaginatedResourceObjectType';
  page?: Maybe<Scalars['Int']>;
  pages?: Maybe<Scalars['Int']>;
  hasNext?: Maybe<Scalars['Boolean']>;
  hasPrev?: Maybe<Scalars['Boolean']>;
  count?: Maybe<Scalars['Int']>;
  objects?: Maybe<Array<Maybe<ResourceObjectType>>>;
};

/**
 * Models one course.
 * 
 * Results are paginated.
 */
export type PaginatedCourseObjectType = {
  __typename?: 'PaginatedCourseObjectType';
  page?: Maybe<Scalars['Int']>;
  pages?: Maybe<Scalars['Int']>;
  hasNext?: Maybe<Scalars['Boolean']>;
  hasPrev?: Maybe<Scalars['Boolean']>;
  count?: Maybe<Scalars['Int']>;
  objects?: Maybe<Array<Maybe<CourseObjectType>>>;
};

/**
 * Models a single activity of a users activity feed.
 * 
 * Results are paginated.
 */
export type PaginatedActivityObjectType = {
  __typename?: 'PaginatedActivityObjectType';
  page?: Maybe<Scalars['Int']>;
  pages?: Maybe<Scalars['Int']>;
  hasNext?: Maybe<Scalars['Boolean']>;
  hasPrev?: Maybe<Scalars['Boolean']>;
  count?: Maybe<Scalars['Int']>;
  objects?: Maybe<Array<Maybe<ActivityObjectType>>>;
};

/** Models a single activity of a users activity feed. */
export type ActivityObjectType = {
  __typename?: 'ActivityObjectType';
  id: Scalars['ID'];
  targetUser?: Maybe<UserObjectType>;
  course?: Maybe<CourseObjectType>;
  resource?: Maybe<ResourceObjectType>;
  comment?: Maybe<CommentObjectType>;
  read?: Maybe<Scalars['Boolean']>;
  description?: Maybe<Scalars['String']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /**
   * Start a course or a resource remove the star if it already exists.
   * 
   * Only allowed for authenticated users that have verified their accounts.
   */
  star?: Maybe<StarMutationPayload>;
  /**
   * Upvote, downvote or remove a vote from a course, resource or a comment.
   * 
   * Only allowed for authenticated users that have verified their accounts.
   */
  vote?: Maybe<VoteMutationPayload>;
  /**
   * Register a new user.
   * 
   * Check if there is an existing user with that email or username. Check that account
   * is not deactivated. By default, set the user's account as unverified. After
   * successful registration, send account verification email.
   */
  register?: Maybe<RegisterMutationPayload>;
  /**
   * Receive the token that was sent by email.
   * 
   * If the token is valid, verify the user's account.
   */
  verifyAccount?: Maybe<VerifyAccountMutationPayload>;
  /**
   * Send the verification email again.
   * 
   * Return an error in the following cases:
   * - A user account with the provided email address was not found.
   * - An unknown error while sending the email occurred.
   * - The user has already verified one's account.
   */
  resendVerificationEmail?: Maybe<ResendVerificationEmailMutation>;
  /**
   * Send password reset email.
   * 
   * Return an error in the following cases:
   * - A user account with the provided email address was not found.
   * - An unknown error while sending the email occurred.
   */
  sendPasswordResetEmail?: Maybe<SendPasswordResetEmailMutationPayload>;
  /**
   * Change user's password without knowing the old password.
   * 
   * Receive the token that was sent by email. Revoke refresh token and require the user
   * to log in again with one's new password.
   */
  resetPassword?: Maybe<ResetPasswordMutationPayload>;
  /**
   * Obtain JSON web token and user information.
   * 
   * Non-verified users can still login.
   */
  login?: Maybe<LoginMutationPayload>;
  /**
   * Delete JSON web token cookie and logout.
   * 
   * This sets the `Set-Cookie` header so that the JWT token cookie gets automatically
   * deleted in frontend.
   */
  logout?: Maybe<LogoutMutation>;
  /**
   * Change password with a requirement of knowing the old password.
   * 
   * Only allowed for authenticated users.
   */
  changePassword?: Maybe<ChangePasswordMutationPayload>;
  /**
   * Update some user model fields.
   * 
   * Only allowed for authenticated users.
   */
  updateUser?: Maybe<UpdateUserMutationPayload>;
  /**
   * Permanently delete the account.
   * 
   * The user must confirm his password.
   * 
   * Only allowed for authenticated users.
   */
  deleteUser?: Maybe<DeleteUserMutationPayload>;
  /**
   * Create a new resource.
   * 
   * Only allowed for authenticated users that have verified their accounts.
   */
  createResource?: Maybe<CreateResourceMutationPayload>;
  /**
   * Update a resource.
   * 
   * Only allowed for users that are the creators of the object.
   * 
   * Only allowed for authenticated users that have verified their accounts.
   */
  updateResource?: Maybe<UpdateResourceMutationPayload>;
  /**
   * Delete a resource.
   * 
   * Results are sorted by creation time.
   * 
   * Only allowed for users that are the creators of the object.
   * 
   * Only allowed for authenticated users that have verified their accounts.
   */
  deleteResource?: Maybe<DeleteResourceMutationPayload>;
  /**
   * Download a resource.
   * 
   * This mutation only increments the amount of downloads of a single resource.
   */
  downloadResource?: Maybe<DownloadResourceMutationPayload>;
  /** Email the user with a link to a zip file containing **all** of their data. */
  myData?: Maybe<MyDataMutation>;
  /**
   * Create a new course.
   * 
   * Only allowed for authenticated users that have verified their accounts.
   */
  createCourse?: Maybe<CreateCourseMutationPayload>;
  /**
   * Delete a course.
   * 
   * Only allowed for users that are the creators of the object.
   * 
   * Only allowed for authenticated users.
   */
  deleteCourse?: Maybe<DeleteCourseMutationPayload>;
  /** Submit a message via the contact form. */
  createContactMessage?: Maybe<ContactMutationPayload>;
  /**
   * Create a new comment.
   * 
   * Attachments are popped of for unauthenticated users. The `user` field must match
   * with the ID of the user making the query to save the user making the query as the
   * author of the comment. This way even authenticated users can create anonymous
   * comments by setting the `user` field as `null`.
   */
  createComment?: Maybe<CreateCommentMutationPayload>;
  /**
   * Update an existing comment.
   * 
   * Only allowed for users that are the creators of the object.
   * 
   * Only allowed for authenticated users.
   */
  updateComment?: Maybe<UpdateCommentMutationPayload>;
  /**
   * Delete a comment.
   * 
   * Only allowed for users that are the creators of the object.
   * 
   * Only allowed for authenticated users.
   */
  deleteComment?: Maybe<DeleteCommentMutationPayload>;
  /**
   * Mark a single activity read/unread.
   * 
   * Only allowed for users that are the creators of the object.
   * 
   * Only allowed for authenticated users.
   */
  markActivityAsRead?: Maybe<MarkActivityAsReadMutationPayload>;
  /**
   * Mark all activities of the given user as read.
   * 
   * Only allowed for authenticated users.
   */
  markAllActivitiesAsRead?: Maybe<MarkAllActivitiesAsReadMutation>;
};


export type MutationStarArgs = {
  input: StarMutationInput;
};


export type MutationVoteArgs = {
  input: VoteMutationInput;
};


export type MutationRegisterArgs = {
  input: RegisterMutationInput;
};


export type MutationVerifyAccountArgs = {
  input: VerifyAccountMutationInput;
};


export type MutationSendPasswordResetEmailArgs = {
  input: SendPasswordResetEmailMutationInput;
};


export type MutationResetPasswordArgs = {
  input: ResetPasswordMutationInput;
};


export type MutationLoginArgs = {
  input: LoginMutationInput;
};


export type MutationChangePasswordArgs = {
  input: ChangePasswordMutationInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserMutationInput;
};


export type MutationDeleteUserArgs = {
  input: DeleteUserMutationInput;
};


export type MutationCreateResourceArgs = {
  input: CreateResourceMutationInput;
};


export type MutationUpdateResourceArgs = {
  input: UpdateResourceMutationInput;
};


export type MutationDeleteResourceArgs = {
  input: DeleteResourceMutationInput;
};


export type MutationDownloadResourceArgs = {
  input: DownloadResourceMutationInput;
};


export type MutationCreateCourseArgs = {
  input: CreateCourseMutationInput;
};


export type MutationDeleteCourseArgs = {
  input: DeleteCourseMutationInput;
};


export type MutationCreateContactMessageArgs = {
  input: ContactMutationInput;
};


export type MutationCreateCommentArgs = {
  input: CreateCommentMutationInput;
};


export type MutationUpdateCommentArgs = {
  input: UpdateCommentMutationInput;
};


export type MutationDeleteCommentArgs = {
  input: DeleteCommentMutationInput;
};


export type MutationMarkActivityAsReadArgs = {
  input: MarkActivityAsReadMutationInput;
};

/**
 * Start a course or a resource remove the star if it already exists.
 * 
 * Only allowed for authenticated users that have verified their accounts.
 */
export type StarMutationPayload = {
  __typename?: 'StarMutationPayload';
  star?: Maybe<StarObjectType>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  starred?: Maybe<Scalars['Boolean']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Models a star that a user has placed on a course or a resource. */
export type StarObjectType = {
  __typename?: 'StarObjectType';
  id: Scalars['ID'];
  user: UserObjectType;
  course?: Maybe<CourseObjectType>;
  resource?: Maybe<ResourceObjectType>;
};

export type ErrorType = {
  __typename?: 'ErrorType';
  field: Scalars['String'];
  messages: Array<Scalars['String']>;
};

export type StarMutationInput = {
  course?: Maybe<Scalars['ID']>;
  resource?: Maybe<Scalars['ID']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Upvote, downvote or remove a vote from a course, resource or a comment.
 * 
 * Only allowed for authenticated users that have verified their accounts.
 */
export type VoteMutationPayload = {
  __typename?: 'VoteMutationPayload';
  vote?: Maybe<VoteObjectType>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  targetScore?: Maybe<Scalars['Int']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type VoteMutationInput = {
  status: Scalars['Int'];
  comment?: Maybe<Scalars['ID']>;
  course?: Maybe<Scalars['ID']>;
  resource?: Maybe<Scalars['ID']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Register a new user.
 * 
 * Check if there is an existing user with that email or username. Check that account
 * is not deactivated. By default, set the user's account as unverified. After
 * successful registration, send account verification email.
 */
export type RegisterMutationPayload = {
  __typename?: 'RegisterMutationPayload';
  successMessage?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type RegisterMutationInput = {
  username: Scalars['String'];
  email: Scalars['String'];
  password: Scalars['String'];
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Receive the token that was sent by email.
 * 
 * If the token is valid, verify the user's account.
 */
export type VerifyAccountMutationPayload = {
  __typename?: 'VerifyAccountMutationPayload';
  token?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  successMessage?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type VerifyAccountMutationInput = {
  token?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Send the verification email again.
 * 
 * Return an error in the following cases:
 * - A user account with the provided email address was not found.
 * - An unknown error while sending the email occurred.
 * - The user has already verified one's account.
 */
export type ResendVerificationEmailMutation = {
  __typename?: 'ResendVerificationEmailMutation';
  successMessage?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
};

/**
 * Send password reset email.
 * 
 * Return an error in the following cases:
 * - A user account with the provided email address was not found.
 * - An unknown error while sending the email occurred.
 */
export type SendPasswordResetEmailMutationPayload = {
  __typename?: 'SendPasswordResetEmailMutationPayload';
  email: Scalars['String'];
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  successMessage?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type SendPasswordResetEmailMutationInput = {
  email: Scalars['String'];
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Change user's password without knowing the old password.
 * 
 * Receive the token that was sent by email. Revoke refresh token and require the user
 * to log in again with one's new password.
 */
export type ResetPasswordMutationPayload = {
  __typename?: 'ResetPasswordMutationPayload';
  token?: Maybe<Scalars['String']>;
  newPassword: Scalars['String'];
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  successMessage?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type ResetPasswordMutationInput = {
  token?: Maybe<Scalars['String']>;
  newPassword: Scalars['String'];
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Obtain JSON web token and user information.
 * 
 * Non-verified users can still login.
 */
export type LoginMutationPayload = {
  __typename?: 'LoginMutationPayload';
  user?: Maybe<UserObjectType>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  successMessage?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type LoginMutationInput = {
  usernameOrEmail: Scalars['String'];
  password: Scalars['String'];
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Delete JSON web token cookie and logout.
 * 
 * This sets the `Set-Cookie` header so that the JWT token cookie gets automatically
 * deleted in frontend.
 */
export type LogoutMutation = {
  __typename?: 'LogoutMutation';
  deleted: Scalars['Boolean'];
};

/**
 * Change password with a requirement of knowing the old password.
 * 
 * Only allowed for authenticated users.
 */
export type ChangePasswordMutationPayload = {
  __typename?: 'ChangePasswordMutationPayload';
  successMessage?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type ChangePasswordMutationInput = {
  oldPassword: Scalars['String'];
  newPassword: Scalars['String'];
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Update some user model fields.
 * 
 * Only allowed for authenticated users.
 */
export type UpdateUserMutationPayload = {
  __typename?: 'UpdateUserMutationPayload';
  user?: Maybe<UserObjectType>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  successMessage?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type UpdateUserMutationInput = {
  username: Scalars['String'];
  email: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
  school?: Maybe<Scalars['ID']>;
  subject?: Maybe<Scalars['ID']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Permanently delete the account.
 * 
 * The user must confirm his password.
 * 
 * Only allowed for authenticated users.
 */
export type DeleteUserMutationPayload = {
  __typename?: 'DeleteUserMutationPayload';
  successMessage?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type DeleteUserMutationInput = {
  password: Scalars['String'];
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Create a new resource.
 * 
 * Only allowed for authenticated users that have verified their accounts.
 */
export type CreateResourceMutationPayload = {
  __typename?: 'CreateResourceMutationPayload';
  resource?: Maybe<ResourceObjectType>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  successMessage?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type CreateResourceMutationInput = {
  title: Scalars['String'];
  file: Scalars['String'];
  resourceType: Scalars['ID'];
  course: Scalars['ID'];
  date?: Maybe<Scalars['Date']>;
  author?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Update a resource.
 * 
 * Only allowed for users that are the creators of the object.
 * 
 * Only allowed for authenticated users that have verified their accounts.
 */
export type UpdateResourceMutationPayload = {
  __typename?: 'UpdateResourceMutationPayload';
  resource?: Maybe<ResourceObjectType>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  successMessage?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type UpdateResourceMutationInput = {
  title: Scalars['String'];
  resourceType: Scalars['ID'];
  date?: Maybe<Scalars['Date']>;
  author?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Delete a resource.
 * 
 * Results are sorted by creation time.
 * 
 * Only allowed for users that are the creators of the object.
 * 
 * Only allowed for authenticated users that have verified their accounts.
 */
export type DeleteResourceMutationPayload = {
  __typename?: 'DeleteResourceMutationPayload';
  successMessage?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type DeleteResourceMutationInput = {
  id?: Maybe<Scalars['ID']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Download a resource.
 * 
 * This mutation only increments the amount of downloads of a single resource.
 */
export type DownloadResourceMutationPayload = {
  __typename?: 'DownloadResourceMutationPayload';
  resource?: Maybe<ResourceObjectType>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  successMessage?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type DownloadResourceMutationInput = {
  id?: Maybe<Scalars['ID']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Email the user with a link to a zip file containing **all** of their data. */
export type MyDataMutation = {
  __typename?: 'MyDataMutation';
  successMessage?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
};

/**
 * Create a new course.
 * 
 * Only allowed for authenticated users that have verified their accounts.
 */
export type CreateCourseMutationPayload = {
  __typename?: 'CreateCourseMutationPayload';
  course?: Maybe<CourseObjectType>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  successMessage?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type CreateCourseMutationInput = {
  name: Scalars['String'];
  code?: Maybe<Scalars['String']>;
  subjects?: Maybe<Array<Maybe<Scalars['ID']>>>;
  school: Scalars['ID'];
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Delete a course.
 * 
 * Only allowed for users that are the creators of the object.
 * 
 * Only allowed for authenticated users.
 */
export type DeleteCourseMutationPayload = {
  __typename?: 'DeleteCourseMutationPayload';
  successMessage?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type DeleteCourseMutationInput = {
  id?: Maybe<Scalars['ID']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Submit a message via the contact form. */
export type ContactMutationPayload = {
  __typename?: 'ContactMutationPayload';
  subject: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  message: Scalars['String'];
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  successMessage?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type ContactMutationInput = {
  subject: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  message: Scalars['String'];
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Create a new comment.
 * 
 * Attachments are popped of for unauthenticated users. The `user` field must match
 * with the ID of the user making the query to save the user making the query as the
 * author of the comment. This way even authenticated users can create anonymous
 * comments by setting the `user` field as `null`.
 */
export type CreateCommentMutationPayload = {
  __typename?: 'CreateCommentMutationPayload';
  comment?: Maybe<CommentObjectType>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  successMessage?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type CreateCommentMutationInput = {
  text?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['String']>;
  course?: Maybe<Scalars['ID']>;
  resource?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['ID']>;
  school?: Maybe<Scalars['ID']>;
  user?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Update an existing comment.
 * 
 * Only allowed for users that are the creators of the object.
 * 
 * Only allowed for authenticated users.
 */
export type UpdateCommentMutationPayload = {
  __typename?: 'UpdateCommentMutationPayload';
  comment?: Maybe<CommentObjectType>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  successMessage?: Maybe<Scalars['String']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type UpdateCommentMutationInput = {
  text?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Delete a comment.
 * 
 * Only allowed for users that are the creators of the object.
 * 
 * Only allowed for authenticated users.
 */
export type DeleteCommentMutationPayload = {
  __typename?: 'DeleteCommentMutationPayload';
  successMessage?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type DeleteCommentMutationInput = {
  id?: Maybe<Scalars['ID']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Mark a single activity read/unread.
 * 
 * Only allowed for users that are the creators of the object.
 * 
 * Only allowed for authenticated users.
 */
export type MarkActivityAsReadMutationPayload = {
  __typename?: 'MarkActivityAsReadMutationPayload';
  activity?: Maybe<ActivityObjectType>;
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  clientMutationId?: Maybe<Scalars['String']>;
};

export type MarkActivityAsReadMutationInput = {
  read?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['ID']>;
  clientMutationId?: Maybe<Scalars['String']>;
};

/**
 * Mark all activities of the given user as read.
 * 
 * Only allowed for authenticated users.
 */
export type MarkAllActivitiesAsReadMutation = {
  __typename?: 'MarkAllActivitiesAsReadMutation';
  errors?: Maybe<Array<Maybe<ErrorType>>>;
  activities?: Maybe<PaginatedActivityObjectType>;
};

export type ActivitiesQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
}>;


export type ActivitiesQuery = (
  { __typename?: 'Query' }
  & { activities?: Maybe<(
    { __typename?: 'PaginatedActivityObjectType' }
    & Pick<PaginatedActivityObjectType, 'page' | 'pages' | 'hasNext' | 'hasPrev' | 'count'>
    & { objects?: Maybe<Array<Maybe<(
      { __typename?: 'ActivityObjectType' }
      & Pick<ActivityObjectType, 'id' | 'description' | 'read'>
      & { targetUser?: Maybe<(
        { __typename?: 'UserObjectType' }
        & Pick<UserObjectType, 'id' | 'username' | 'avatarThumbnail'>
      )>, course?: Maybe<(
        { __typename?: 'CourseObjectType' }
        & Pick<CourseObjectType, 'id'>
      )>, resource?: Maybe<(
        { __typename?: 'ResourceObjectType' }
        & Pick<ResourceObjectType, 'id'>
      )>, comment?: Maybe<(
        { __typename?: 'CommentObjectType' }
        & Pick<CommentObjectType, 'id'>
      )> }
    )>>> }
  )> }
);

export type ActivityPreviewQueryVariables = Exact<{ [key: string]: never; }>;


export type ActivityPreviewQuery = (
  { __typename?: 'Query' }
  & { activityPreview?: Maybe<Array<Maybe<(
    { __typename?: 'ActivityObjectType' }
    & Pick<ActivityObjectType, 'id' | 'description' | 'read'>
    & { targetUser?: Maybe<(
      { __typename?: 'UserObjectType' }
      & Pick<UserObjectType, 'id' | 'username' | 'avatarThumbnail'>
    )>, course?: Maybe<(
      { __typename?: 'CourseObjectType' }
      & Pick<CourseObjectType, 'id'>
    )>, resource?: Maybe<(
      { __typename?: 'ResourceObjectType' }
      & Pick<ResourceObjectType, 'id'>
    )>, comment?: Maybe<(
      { __typename?: 'CommentObjectType' }
      & Pick<CommentObjectType, 'id'>
    )> }
  )>>> }
);

export type MarkActivityAsReadMutationVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
  read?: Maybe<Scalars['Boolean']>;
}>;


export type MarkActivityAsReadMutation = (
  { __typename?: 'Mutation' }
  & { markActivityAsRead?: Maybe<(
    { __typename?: 'MarkActivityAsReadMutationPayload' }
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>>, activity?: Maybe<(
      { __typename?: 'ActivityObjectType' }
      & Pick<ActivityObjectType, 'id' | 'description' | 'read'>
      & { targetUser?: Maybe<(
        { __typename?: 'UserObjectType' }
        & Pick<UserObjectType, 'id' | 'username' | 'avatarThumbnail'>
      )>, course?: Maybe<(
        { __typename?: 'CourseObjectType' }
        & Pick<CourseObjectType, 'id'>
      )>, resource?: Maybe<(
        { __typename?: 'ResourceObjectType' }
        & Pick<ResourceObjectType, 'id'>
      )>, comment?: Maybe<(
        { __typename?: 'CommentObjectType' }
        & Pick<CommentObjectType, 'id'>
      )> }
    )> }
  )> }
);

export type GraphQlMarkAllActivitiesAsReadMutationVariables = Exact<{ [key: string]: never; }>;


export type GraphQlMarkAllActivitiesAsReadMutation = (
  { __typename?: 'Mutation' }
  & { markAllActivitiesAsRead?: Maybe<(
    { __typename?: 'MarkAllActivitiesAsReadMutation' }
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>>, activities?: Maybe<(
      { __typename?: 'PaginatedActivityObjectType' }
      & Pick<PaginatedActivityObjectType, 'page' | 'pages' | 'hasNext' | 'hasPrev' | 'count'>
      & { objects?: Maybe<Array<Maybe<(
        { __typename?: 'ActivityObjectType' }
        & Pick<ActivityObjectType, 'id' | 'description' | 'read'>
        & { targetUser?: Maybe<(
          { __typename?: 'UserObjectType' }
          & Pick<UserObjectType, 'id' | 'username' | 'avatarThumbnail'>
        )>, course?: Maybe<(
          { __typename?: 'CourseObjectType' }
          & Pick<CourseObjectType, 'id'>
        )>, resource?: Maybe<(
          { __typename?: 'ResourceObjectType' }
          & Pick<ResourceObjectType, 'id'>
        )>, comment?: Maybe<(
          { __typename?: 'CommentObjectType' }
          & Pick<CommentObjectType, 'id'>
        )> }
      )>>> }
    )> }
  )> }
);

export type AutocompleteCitiesQueryVariables = Exact<{ [key: string]: never; }>;


export type AutocompleteCitiesQuery = (
  { __typename?: 'Query' }
  & { autocompleteCities?: Maybe<Array<Maybe<(
    { __typename?: 'CityObjectType' }
    & Pick<CityObjectType, 'id' | 'name'>
  )>>> }
);

export type CreateCommentMutationVariables = Exact<{
  user?: Maybe<Scalars['String']>;
  text: Scalars['String'];
  attachment?: Maybe<Scalars['String']>;
  course?: Maybe<Scalars['ID']>;
  resource?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['ID']>;
  school?: Maybe<Scalars['ID']>;
}>;


export type CreateCommentMutation = (
  { __typename?: 'Mutation' }
  & { createComment?: Maybe<(
    { __typename?: 'CreateCommentMutationPayload' }
    & Pick<CreateCommentMutationPayload, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type DeleteCommentMutationVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
}>;


export type DeleteCommentMutation = (
  { __typename?: 'Mutation' }
  & { deleteComment?: Maybe<(
    { __typename?: 'DeleteCommentMutationPayload' }
    & Pick<DeleteCommentMutationPayload, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type CreateContactMessageMutationVariables = Exact<{
  subject: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  message: Scalars['String'];
}>;


export type CreateContactMessageMutation = (
  { __typename?: 'Mutation' }
  & { createContactMessage?: Maybe<(
    { __typename?: 'ContactMutationPayload' }
    & Pick<ContactMutationPayload, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type AutocompleteCountriesQueryVariables = Exact<{ [key: string]: never; }>;


export type AutocompleteCountriesQuery = (
  { __typename?: 'Query' }
  & { autocompleteCountries?: Maybe<Array<Maybe<(
    { __typename?: 'CountryObjectType' }
    & Pick<CountryObjectType, 'id' | 'name'>
  )>>> }
);

export type CoursesQueryVariables = Exact<{
  searchTerm?: Maybe<Scalars['String']>;
  school?: Maybe<Scalars['ID']>;
  subject?: Maybe<Scalars['ID']>;
  schoolType?: Maybe<Scalars['ID']>;
  country?: Maybe<Scalars['ID']>;
  city?: Maybe<Scalars['ID']>;
  ordering?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
}>;


export type CoursesQuery = (
  { __typename?: 'Query' }
  & { courses?: Maybe<(
    { __typename?: 'PaginatedCourseObjectType' }
    & Pick<PaginatedCourseObjectType, 'page' | 'pages' | 'hasPrev' | 'hasNext' | 'count'>
    & { objects?: Maybe<Array<Maybe<(
      { __typename?: 'CourseObjectType' }
      & Pick<CourseObjectType, 'id' | 'name' | 'code' | 'score' | 'starCount' | 'resourceCount' | 'commentCount' | 'created'>
      & { user?: Maybe<(
        { __typename?: 'UserObjectType' }
        & Pick<UserObjectType, 'id' | 'username'>
      )> }
    )>>> }
  )>, school?: Maybe<(
    { __typename?: 'SchoolObjectType' }
    & Pick<SchoolObjectType, 'id' | 'name'>
  )>, subject?: Maybe<(
    { __typename?: 'SubjectObjectType' }
    & Pick<SubjectObjectType, 'id' | 'name'>
  )>, schoolType?: Maybe<(
    { __typename?: 'SchoolTypeObjectType' }
    & Pick<SchoolTypeObjectType, 'id' | 'name'>
  )>, country?: Maybe<(
    { __typename?: 'CountryObjectType' }
    & Pick<CountryObjectType, 'id' | 'name'>
  )>, city?: Maybe<(
    { __typename?: 'CityObjectType' }
    & Pick<CityObjectType, 'id' | 'name'>
  )> }
);

export type CourseQueryVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
}>;


export type CourseQuery = (
  { __typename?: 'Query' }
  & { course?: Maybe<(
    { __typename?: 'CourseObjectType' }
    & Pick<CourseObjectType, 'id' | 'name' | 'code' | 'modified' | 'created' | 'score' | 'starred' | 'starCount' | 'commentCount'>
    & { vote?: Maybe<(
      { __typename?: 'VoteObjectType' }
      & Pick<VoteObjectType, 'id' | 'status'>
    )>, subjects: Array<(
      { __typename?: 'SubjectObjectType' }
      & Pick<SubjectObjectType, 'id' | 'name'>
    )>, school: (
      { __typename?: 'SchoolObjectType' }
      & Pick<SchoolObjectType, 'id' | 'name'>
    ), user?: Maybe<(
      { __typename?: 'UserObjectType' }
      & Pick<UserObjectType, 'id' | 'username'>
    )> }
  )>, resources?: Maybe<(
    { __typename?: 'PaginatedResourceObjectType' }
    & Pick<PaginatedResourceObjectType, 'page' | 'pages' | 'hasNext' | 'hasPrev' | 'count'>
    & { objects?: Maybe<Array<Maybe<(
      { __typename?: 'ResourceObjectType' }
      & Pick<ResourceObjectType, 'id' | 'title' | 'score' | 'date' | 'starCount' | 'commentCount' | 'downloads' | 'created'>
      & { resourceType?: Maybe<(
        { __typename?: 'ResourceTypeObjectType' }
        & Pick<ResourceTypeObjectType, 'name'>
      )>, user?: Maybe<(
        { __typename?: 'UserObjectType' }
        & Pick<UserObjectType, 'id' | 'username'>
      )> }
    )>>> }
  )> }
);

export type CourseSeoPropsQueryVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
}>;


export type CourseSeoPropsQuery = (
  { __typename?: 'Query' }
  & { course?: Maybe<(
    { __typename?: 'CourseObjectType' }
    & Pick<CourseObjectType, 'name' | 'code'>
  )> }
);

export type CreateCourseAutocompleteDataQueryVariables = Exact<{
  school?: Maybe<Scalars['ID']>;
}>;


export type CreateCourseAutocompleteDataQuery = (
  { __typename?: 'Query' }
  & { school?: Maybe<(
    { __typename?: 'SchoolObjectType' }
    & Pick<SchoolObjectType, 'id' | 'name'>
  )> }
);

export type AutocompleteCoursesQueryVariables = Exact<{
  school?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
}>;


export type AutocompleteCoursesQuery = (
  { __typename?: 'Query' }
  & { autocompleteCourses?: Maybe<Array<Maybe<(
    { __typename?: 'CourseObjectType' }
    & Pick<CourseObjectType, 'id' | 'name' | 'code'>
  )>>> }
);

export type CreateCourseMutationVariables = Exact<{
  courseName: Scalars['String'];
  courseCode?: Maybe<Scalars['String']>;
  subjects?: Maybe<Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>>;
  school: Scalars['ID'];
}>;


export type CreateCourseMutation = (
  { __typename?: 'Mutation' }
  & { createCourse?: Maybe<(
    { __typename?: 'CreateCourseMutationPayload' }
    & Pick<CreateCourseMutationPayload, 'successMessage'>
    & { course?: Maybe<(
      { __typename?: 'CourseObjectType' }
      & Pick<CourseObjectType, 'id'>
    )>, errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type DeleteCourseMutationVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
}>;


export type DeleteCourseMutation = (
  { __typename?: 'Mutation' }
  & { deleteCourse?: Maybe<(
    { __typename?: 'DeleteCourseMutationPayload' }
    & Pick<DeleteCourseMutationPayload, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type ResourceQueryVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
}>;


export type ResourceQuery = (
  { __typename?: 'Query' }
  & { resource?: Maybe<(
    { __typename?: 'ResourceObjectType' }
    & Pick<ResourceObjectType, 'id' | 'title' | 'file' | 'date' | 'modified' | 'created' | 'score' | 'starred' | 'starCount' | 'downloads' | 'commentCount'>
    & { resourceType?: Maybe<(
      { __typename?: 'ResourceTypeObjectType' }
      & Pick<ResourceTypeObjectType, 'id' | 'name'>
    )>, school?: Maybe<(
      { __typename?: 'SchoolObjectType' }
      & Pick<SchoolObjectType, 'id' | 'name'>
    )>, course: (
      { __typename?: 'CourseObjectType' }
      & Pick<CourseObjectType, 'id' | 'name'>
    ), user?: Maybe<(
      { __typename?: 'UserObjectType' }
      & Pick<UserObjectType, 'id' | 'username'>
    )>, vote?: Maybe<(
      { __typename?: 'VoteObjectType' }
      & Pick<VoteObjectType, 'id' | 'status'>
    )> }
  )> }
);

export type ResourceSeoPropsQueryVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
}>;


export type ResourceSeoPropsQuery = (
  { __typename?: 'Query' }
  & { resource?: Maybe<(
    { __typename?: 'ResourceObjectType' }
    & Pick<ResourceObjectType, 'title' | 'date'>
  )> }
);

export type CreateResourceAutocompleteDataQueryVariables = Exact<{
  school?: Maybe<Scalars['ID']>;
  course?: Maybe<Scalars['ID']>;
}>;


export type CreateResourceAutocompleteDataQuery = (
  { __typename?: 'Query' }
  & { school?: Maybe<(
    { __typename?: 'SchoolObjectType' }
    & Pick<SchoolObjectType, 'id' | 'name'>
  )>, course?: Maybe<(
    { __typename?: 'CourseObjectType' }
    & Pick<CourseObjectType, 'id' | 'name' | 'code'>
  )> }
);

export type AutocompleteResourceTypesQueryVariables = Exact<{ [key: string]: never; }>;


export type AutocompleteResourceTypesQuery = (
  { __typename?: 'Query' }
  & { autocompleteResourceTypes?: Maybe<Array<Maybe<(
    { __typename?: 'ResourceTypeObjectType' }
    & Pick<ResourceTypeObjectType, 'id' | 'name'>
  )>>> }
);

export type CreateResourceMutationVariables = Exact<{
  resourceTitle: Scalars['String'];
  resourceType: Scalars['ID'];
  date?: Maybe<Scalars['Date']>;
  course: Scalars['ID'];
  file: Scalars['String'];
}>;


export type CreateResourceMutation = (
  { __typename?: 'Mutation' }
  & { createResource?: Maybe<(
    { __typename?: 'CreateResourceMutationPayload' }
    & Pick<CreateResourceMutationPayload, 'successMessage'>
    & { resource?: Maybe<(
      { __typename?: 'ResourceObjectType' }
      & Pick<ResourceObjectType, 'id'>
    )>, errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type DeleteResourceMutationVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
}>;


export type DeleteResourceMutation = (
  { __typename?: 'Mutation' }
  & { deleteResource?: Maybe<(
    { __typename?: 'DeleteResourceMutationPayload' }
    & Pick<DeleteResourceMutationPayload, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type DownloadResourceMutationVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
}>;


export type DownloadResourceMutation = (
  { __typename?: 'Mutation' }
  & { downloadResource?: Maybe<(
    { __typename?: 'DownloadResourceMutationPayload' }
    & { resource?: Maybe<(
      { __typename?: 'ResourceObjectType' }
      & Pick<ResourceObjectType, 'downloads'>
    )>, errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type SchoolQueryVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
}>;


export type SchoolQuery = (
  { __typename?: 'Query' }
  & { school?: Maybe<(
    { __typename?: 'SchoolObjectType' }
    & Pick<SchoolObjectType, 'id' | 'name'>
    & { city?: Maybe<(
      { __typename?: 'CityObjectType' }
      & Pick<CityObjectType, 'id' | 'name'>
    )>, country?: Maybe<(
      { __typename?: 'CountryObjectType' }
      & Pick<CountryObjectType, 'id' | 'name'>
    )>, schoolType?: Maybe<(
      { __typename?: 'SchoolTypeObjectType' }
      & Pick<SchoolTypeObjectType, 'id' | 'name'>
    )> }
  )>, subjects?: Maybe<(
    { __typename?: 'PaginatedSubjectObjectType' }
    & Pick<PaginatedSubjectObjectType, 'page' | 'pages' | 'hasNext' | 'hasPrev' | 'count'>
    & { objects?: Maybe<Array<Maybe<(
      { __typename?: 'SubjectObjectType' }
      & Pick<SubjectObjectType, 'id' | 'name' | 'courseCount' | 'resourceCount'>
    )>>> }
  )>, courses?: Maybe<(
    { __typename?: 'PaginatedCourseObjectType' }
    & Pick<PaginatedCourseObjectType, 'page' | 'pages' | 'hasNext' | 'hasPrev' | 'count'>
    & { objects?: Maybe<Array<Maybe<(
      { __typename?: 'CourseObjectType' }
      & Pick<CourseObjectType, 'id' | 'name' | 'code' | 'score' | 'starCount' | 'resourceCount' | 'commentCount'>
      & { user?: Maybe<(
        { __typename?: 'UserObjectType' }
        & Pick<UserObjectType, 'id' | 'username'>
      )> }
    )>>> }
  )> }
);

export type AutocompleteSchoolsQueryVariables = Exact<{
  name?: Maybe<Scalars['String']>;
}>;


export type AutocompleteSchoolsQuery = (
  { __typename?: 'Query' }
  & { autocompleteSchools?: Maybe<Array<Maybe<(
    { __typename?: 'SchoolObjectType' }
    & Pick<SchoolObjectType, 'id' | 'name'>
  )>>> }
);

export type AutocompleteSchoolTypesQueryVariables = Exact<{ [key: string]: never; }>;


export type AutocompleteSchoolTypesQuery = (
  { __typename?: 'Query' }
  & { autocompleteSchoolTypes?: Maybe<Array<Maybe<(
    { __typename?: 'SchoolTypeObjectType' }
    & Pick<SchoolTypeObjectType, 'id' | 'name'>
  )>>> }
);

export type StarredQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
}>;


export type StarredQuery = (
  { __typename?: 'Query' }
  & { starredCourses?: Maybe<(
    { __typename?: 'PaginatedCourseObjectType' }
    & Pick<PaginatedCourseObjectType, 'page' | 'pages' | 'hasNext' | 'hasPrev' | 'count'>
    & { objects?: Maybe<Array<Maybe<(
      { __typename?: 'CourseObjectType' }
      & Pick<CourseObjectType, 'id' | 'name' | 'code' | 'score' | 'starCount' | 'resourceCount' | 'commentCount'>
      & { user?: Maybe<(
        { __typename?: 'UserObjectType' }
        & Pick<UserObjectType, 'id' | 'username'>
      )> }
    )>>> }
  )>, starredResources?: Maybe<(
    { __typename?: 'PaginatedResourceObjectType' }
    & Pick<PaginatedResourceObjectType, 'page' | 'pages' | 'hasNext' | 'hasPrev' | 'count'>
    & { objects?: Maybe<Array<Maybe<(
      { __typename?: 'ResourceObjectType' }
      & Pick<ResourceObjectType, 'id' | 'title' | 'score' | 'date' | 'starCount' | 'commentCount' | 'downloads'>
      & { course: (
        { __typename?: 'CourseObjectType' }
        & Pick<CourseObjectType, 'name' | 'code'>
      ), resourceType?: Maybe<(
        { __typename?: 'ResourceTypeObjectType' }
        & Pick<ResourceTypeObjectType, 'name'>
      )> }
    )>>> }
  )> }
);

export type StarMutationVariables = Exact<{
  course?: Maybe<Scalars['ID']>;
  resource?: Maybe<Scalars['ID']>;
}>;


export type StarMutation = (
  { __typename?: 'Mutation' }
  & { star?: Maybe<(
    { __typename?: 'StarMutationPayload' }
    & Pick<StarMutationPayload, 'starred'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type AutocompleteSubjectsQueryVariables = Exact<{
  name?: Maybe<Scalars['String']>;
}>;


export type AutocompleteSubjectsQuery = (
  { __typename?: 'Query' }
  & { autocompleteSubjects?: Maybe<Array<Maybe<(
    { __typename?: 'SubjectObjectType' }
    & Pick<SubjectObjectType, 'id' | 'name'>
  )>>> }
);

export type UserMeQueryVariables = Exact<{ [key: string]: never; }>;


export type UserMeQuery = (
  { __typename?: 'Query' }
  & { userMe?: Maybe<(
    { __typename?: 'UserObjectType' }
    & Pick<UserObjectType, 'id' | 'username' | 'email' | 'title' | 'bio' | 'avatar' | 'avatarThumbnail' | 'score' | 'created' | 'verified' | 'unreadActivityCount'>
    & { school?: Maybe<(
      { __typename?: 'SchoolObjectType' }
      & Pick<SchoolObjectType, 'id' | 'name'>
    )>, subject?: Maybe<(
      { __typename?: 'SubjectObjectType' }
      & Pick<SubjectObjectType, 'id' | 'name'>
    )> }
  )> }
);

export type UserQueryVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
}>;


export type UserQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'UserObjectType' }
    & Pick<UserObjectType, 'id' | 'username' | 'title' | 'bio' | 'avatar' | 'score' | 'created' | 'verified' | 'rank'>
    & { badges?: Maybe<Array<Maybe<(
      { __typename?: 'BadgeObjectType' }
      & Pick<BadgeObjectType, 'id' | 'name' | 'description'>
    )>>> }
  )>, courses?: Maybe<(
    { __typename?: 'PaginatedCourseObjectType' }
    & Pick<PaginatedCourseObjectType, 'page' | 'pages' | 'hasNext' | 'hasPrev' | 'count'>
    & { objects?: Maybe<Array<Maybe<(
      { __typename?: 'CourseObjectType' }
      & Pick<CourseObjectType, 'id' | 'name' | 'code' | 'score' | 'starCount' | 'resourceCount' | 'commentCount' | 'created'>
      & { user?: Maybe<(
        { __typename?: 'UserObjectType' }
        & Pick<UserObjectType, 'id' | 'username'>
      )> }
    )>>> }
  )>, resources?: Maybe<(
    { __typename?: 'PaginatedResourceObjectType' }
    & Pick<PaginatedResourceObjectType, 'page' | 'pages' | 'hasNext' | 'hasPrev' | 'count'>
    & { objects?: Maybe<Array<Maybe<(
      { __typename?: 'ResourceObjectType' }
      & Pick<ResourceObjectType, 'id' | 'title' | 'score' | 'date' | 'starCount' | 'commentCount' | 'downloads' | 'created'>
      & { course: (
        { __typename?: 'CourseObjectType' }
        & Pick<CourseObjectType, 'name' | 'code'>
      ), resourceType?: Maybe<(
        { __typename?: 'ResourceTypeObjectType' }
        & Pick<ResourceTypeObjectType, 'name'>
      )>, user?: Maybe<(
        { __typename?: 'UserObjectType' }
        & Pick<UserObjectType, 'id' | 'username'>
      )> }
    )>>> }
  )>, comments?: Maybe<(
    { __typename?: 'PaginatedCommentObjectType' }
    & Pick<PaginatedCommentObjectType, 'page' | 'pages' | 'hasNext' | 'hasPrev' | 'count'>
    & { objects?: Maybe<Array<Maybe<(
      { __typename?: 'CommentObjectType' }
      & Pick<CommentObjectType, 'id' | 'text' | 'attachment' | 'created' | 'score' | 'replyCount'>
      & { user?: Maybe<(
        { __typename?: 'UserObjectType' }
        & Pick<UserObjectType, 'id' | 'username' | 'avatarThumbnail'>
      )>, course?: Maybe<(
        { __typename?: 'CourseObjectType' }
        & Pick<CourseObjectType, 'id' | 'name'>
      )>, resource?: Maybe<(
        { __typename?: 'ResourceObjectType' }
        & Pick<ResourceObjectType, 'id' | 'title'>
      )>, comment?: Maybe<(
        { __typename?: 'CommentObjectType' }
        & { course?: Maybe<(
          { __typename?: 'CourseObjectType' }
          & Pick<CourseObjectType, 'id'>
        )>, resource?: Maybe<(
          { __typename?: 'ResourceObjectType' }
          & Pick<ResourceObjectType, 'id'>
        )> }
      )> }
    )>>> }
  )> }
);

export type RegisterMutationVariables = Exact<{
  username: Scalars['String'];
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type RegisterMutation = (
  { __typename?: 'Mutation' }
  & { register?: Maybe<(
    { __typename?: 'RegisterMutationPayload' }
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )>, login?: Maybe<(
    { __typename?: 'LoginMutationPayload' }
    & { user?: Maybe<(
      { __typename?: 'UserObjectType' }
      & Pick<UserObjectType, 'username' | 'email'>
    )>, errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type LoginMutationVariables = Exact<{
  usernameOrEmail: Scalars['String'];
  password: Scalars['String'];
}>;


export type LoginMutation = (
  { __typename?: 'Mutation' }
  & { login?: Maybe<(
    { __typename?: 'LoginMutationPayload' }
    & Pick<LoginMutationPayload, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type GraphQlLogoutMutationVariables = Exact<{ [key: string]: never; }>;


export type GraphQlLogoutMutation = (
  { __typename?: 'Mutation' }
  & { logout?: Maybe<(
    { __typename?: 'LogoutMutation' }
    & Pick<LogoutMutation, 'deleted'>
  )> }
);

export type GraphQlResendVerificationEmailMutationVariables = Exact<{ [key: string]: never; }>;


export type GraphQlResendVerificationEmailMutation = (
  { __typename?: 'Mutation' }
  & { resendVerificationEmail?: Maybe<(
    { __typename?: 'ResendVerificationEmailMutation' }
    & Pick<ResendVerificationEmailMutation, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type GraphQlMyDataMutationVariables = Exact<{ [key: string]: never; }>;


export type GraphQlMyDataMutation = (
  { __typename?: 'Mutation' }
  & { myData?: Maybe<(
    { __typename?: 'MyDataMutation' }
    & Pick<MyDataMutation, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type VerifyAccountMutationVariables = Exact<{
  token?: Maybe<Scalars['String']>;
}>;


export type VerifyAccountMutation = (
  { __typename?: 'Mutation' }
  & { verifyAccount?: Maybe<(
    { __typename?: 'VerifyAccountMutationPayload' }
    & Pick<VerifyAccountMutationPayload, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type SendPasswordResetEmailMutationVariables = Exact<{
  email: Scalars['String'];
}>;


export type SendPasswordResetEmailMutation = (
  { __typename?: 'Mutation' }
  & { sendPasswordResetEmail?: Maybe<(
    { __typename?: 'SendPasswordResetEmailMutationPayload' }
    & Pick<SendPasswordResetEmailMutationPayload, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type ResetPasswordMutationVariables = Exact<{
  token?: Maybe<Scalars['String']>;
  newPassword: Scalars['String'];
}>;


export type ResetPasswordMutation = (
  { __typename?: 'Mutation' }
  & { resetPassword?: Maybe<(
    { __typename?: 'ResetPasswordMutationPayload' }
    & Pick<ResetPasswordMutationPayload, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type UpdateUserMutationVariables = Exact<{
  username: Scalars['String'];
  email: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
  school?: Maybe<Scalars['ID']>;
  subject?: Maybe<Scalars['ID']>;
}>;


export type UpdateUserMutation = (
  { __typename?: 'Mutation' }
  & { updateUser?: Maybe<(
    { __typename?: 'UpdateUserMutationPayload' }
    & Pick<UpdateUserMutationPayload, 'successMessage'>
    & { user?: Maybe<(
      { __typename?: 'UserObjectType' }
      & Pick<UserObjectType, 'id' | 'username' | 'email' | 'title' | 'bio' | 'avatar' | 'score' | 'created'>
    )>, errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type ChangePasswordMutationVariables = Exact<{
  oldPassword: Scalars['String'];
  newPassword: Scalars['String'];
}>;


export type ChangePasswordMutation = (
  { __typename?: 'Mutation' }
  & { changePassword?: Maybe<(
    { __typename?: 'ChangePasswordMutationPayload' }
    & Pick<ChangePasswordMutationPayload, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type DeleteUserMutationVariables = Exact<{
  password: Scalars['String'];
}>;


export type DeleteUserMutation = (
  { __typename?: 'Mutation' }
  & { deleteUser?: Maybe<(
    { __typename?: 'DeleteUserMutationPayload' }
    & Pick<DeleteUserMutationPayload, 'successMessage'>
    & { errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type VoteMutationVariables = Exact<{
  status: Scalars['Int'];
  comment?: Maybe<Scalars['ID']>;
  course?: Maybe<Scalars['ID']>;
  resource?: Maybe<Scalars['ID']>;
}>;


export type VoteMutation = (
  { __typename?: 'Mutation' }
  & { vote?: Maybe<(
    { __typename?: 'VoteMutationPayload' }
    & Pick<VoteMutationPayload, 'targetScore'>
    & { vote?: Maybe<(
      { __typename?: 'VoteObjectType' }
      & Pick<VoteObjectType, 'id' | 'status'>
    )>, errors?: Maybe<Array<Maybe<(
      { __typename?: 'ErrorType' }
      & Pick<ErrorType, 'field' | 'messages'>
    )>>> }
  )> }
);

export type SitemapQueryVariables = Exact<{ [key: string]: never; }>;


export type SitemapQuery = (
  { __typename?: 'Query' }
  & { sitemap?: Maybe<(
    { __typename?: 'SitemapObjectType' }
    & { courses: Array<(
      { __typename?: 'SitemapEntryObjectType' }
      & Pick<SitemapEntryObjectType, 'id' | 'modified'>
    )>, resources: Array<(
      { __typename?: 'SitemapEntryObjectType' }
      & Pick<SitemapEntryObjectType, 'id' | 'modified'>
    )>, schools: Array<(
      { __typename?: 'SitemapEntryObjectType' }
      & Pick<SitemapEntryObjectType, 'id' | 'modified'>
    )>, users: Array<(
      { __typename?: 'SitemapEntryObjectType' }
      & Pick<SitemapEntryObjectType, 'id' | 'modified'>
    )> }
  )> }
);

export type SuggestionsQueryVariables = Exact<{ [key: string]: never; }>;


export type SuggestionsQuery = (
  { __typename?: 'Query' }
  & { suggestions?: Maybe<Array<Maybe<(
    { __typename?: 'CourseObjectType' }
    & Pick<CourseObjectType, 'id' | 'name' | 'code' | 'score' | 'starCount' | 'resourceCount' | 'commentCount' | 'created'>
    & { user?: Maybe<(
      { __typename?: 'UserObjectType' }
      & Pick<UserObjectType, 'id' | 'username'>
    )> }
  ) | (
    { __typename?: 'ResourceObjectType' }
    & Pick<ResourceObjectType, 'id' | 'title' | 'score' | 'date' | 'starCount' | 'commentCount' | 'downloads' | 'created'>
    & { resourceType?: Maybe<(
      { __typename?: 'ResourceTypeObjectType' }
      & Pick<ResourceTypeObjectType, 'name'>
    )>, user?: Maybe<(
      { __typename?: 'UserObjectType' }
      & Pick<UserObjectType, 'id' | 'username'>
    )>, course: (
      { __typename?: 'CourseObjectType' }
      & Pick<CourseObjectType, 'name' | 'code'>
    ) }
  ) | (
    { __typename?: 'CommentObjectType' }
    & Pick<CommentObjectType, 'id' | 'text' | 'attachment' | 'created' | 'score' | 'replyCount'>
    & { user?: Maybe<(
      { __typename?: 'UserObjectType' }
      & Pick<UserObjectType, 'id' | 'username' | 'avatarThumbnail'>
    )>, commentCourse?: Maybe<(
      { __typename?: 'CourseObjectType' }
      & Pick<CourseObjectType, 'id' | 'name'>
    )>, resource?: Maybe<(
      { __typename?: 'ResourceObjectType' }
      & Pick<ResourceObjectType, 'id' | 'title'>
    )> }
  )>>> }
);

export type SuggestionsPreviewQueryVariables = Exact<{ [key: string]: never; }>;


export type SuggestionsPreviewQuery = (
  { __typename?: 'Query' }
  & { suggestionsPreview?: Maybe<Array<Maybe<(
    { __typename?: 'CourseObjectType' }
    & Pick<CourseObjectType, 'id' | 'name' | 'code' | 'score' | 'starCount' | 'resourceCount' | 'commentCount' | 'created'>
    & { user?: Maybe<(
      { __typename?: 'UserObjectType' }
      & Pick<UserObjectType, 'id' | 'username'>
    )> }
  ) | (
    { __typename?: 'ResourceObjectType' }
    & Pick<ResourceObjectType, 'id' | 'title' | 'score' | 'starCount' | 'commentCount' | 'downloads' | 'created'>
    & { resourceType?: Maybe<(
      { __typename?: 'ResourceTypeObjectType' }
      & Pick<ResourceTypeObjectType, 'name'>
    )>, course: (
      { __typename?: 'CourseObjectType' }
      & Pick<CourseObjectType, 'name' | 'code'>
    ), user?: Maybe<(
      { __typename?: 'UserObjectType' }
      & Pick<UserObjectType, 'id' | 'username'>
    )> }
  ) | (
    { __typename?: 'CommentObjectType' }
    & Pick<CommentObjectType, 'id' | 'text' | 'attachment' | 'created' | 'score' | 'replyCount'>
    & { user?: Maybe<(
      { __typename?: 'UserObjectType' }
      & Pick<UserObjectType, 'id' | 'username'>
    )>, commentCourse?: Maybe<(
      { __typename?: 'CourseObjectType' }
      & Pick<CourseObjectType, 'id' | 'name'>
    )>, resource?: Maybe<(
      { __typename?: 'ResourceObjectType' }
      & Pick<ResourceObjectType, 'id' | 'title'>
    )> }
  )>>> }
);

export type DiscussionQueryVariables = Exact<{
  course?: Maybe<Scalars['ID']>;
  resource?: Maybe<Scalars['ID']>;
}>;


export type DiscussionQuery = (
  { __typename?: 'Query' }
  & { discussion?: Maybe<Array<Maybe<(
    { __typename?: 'CommentObjectType' }
    & Pick<CommentObjectType, 'id' | 'text' | 'attachment' | 'attachmentThumbnail' | 'created' | 'score'>
    & { user?: Maybe<(
      { __typename?: 'UserObjectType' }
      & Pick<UserObjectType, 'id' | 'username' | 'avatarThumbnail'>
    )>, vote?: Maybe<(
      { __typename?: 'VoteObjectType' }
      & Pick<VoteObjectType, 'id' | 'status'>
    )>, replyComments: Array<(
      { __typename?: 'CommentObjectType' }
      & Pick<CommentObjectType, 'id' | 'text' | 'attachment' | 'attachmentThumbnail' | 'created' | 'score'>
      & { user?: Maybe<(
        { __typename?: 'UserObjectType' }
        & Pick<UserObjectType, 'id' | 'username' | 'avatarThumbnail'>
      )>, vote?: Maybe<(
        { __typename?: 'VoteObjectType' }
        & Pick<VoteObjectType, 'id' | 'status'>
      )> }
    )> }
  )>>> }
);


export const ActivitiesDocument = gql`
    query Activities($page: Int, $pageSize: Int) {
  activities(page: $page, pageSize: $pageSize) {
    page
    pages
    hasNext
    hasPrev
    count
    objects {
      id
      description
      read
      targetUser {
        id
        username
        avatarThumbnail
      }
      course {
        id
      }
      resource {
        id
      }
      comment {
        id
      }
    }
  }
}
    `;

/**
 * __useActivitiesQuery__
 *
 * To run a query within a React component, call `useActivitiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useActivitiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useActivitiesQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useActivitiesQuery(baseOptions?: Apollo.QueryHookOptions<ActivitiesQuery, ActivitiesQueryVariables>) {
        return Apollo.useQuery<ActivitiesQuery, ActivitiesQueryVariables>(ActivitiesDocument, baseOptions);
      }
export function useActivitiesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ActivitiesQuery, ActivitiesQueryVariables>) {
          return Apollo.useLazyQuery<ActivitiesQuery, ActivitiesQueryVariables>(ActivitiesDocument, baseOptions);
        }
export type ActivitiesQueryHookResult = ReturnType<typeof useActivitiesQuery>;
export type ActivitiesLazyQueryHookResult = ReturnType<typeof useActivitiesLazyQuery>;
export type ActivitiesQueryResult = Apollo.QueryResult<ActivitiesQuery, ActivitiesQueryVariables>;
export const ActivityPreviewDocument = gql`
    query ActivityPreview {
  activityPreview {
    id
    description
    read
    targetUser {
      id
      username
      avatarThumbnail
    }
    course {
      id
    }
    resource {
      id
    }
    comment {
      id
    }
  }
}
    `;

/**
 * __useActivityPreviewQuery__
 *
 * To run a query within a React component, call `useActivityPreviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useActivityPreviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useActivityPreviewQuery({
 *   variables: {
 *   },
 * });
 */
export function useActivityPreviewQuery(baseOptions?: Apollo.QueryHookOptions<ActivityPreviewQuery, ActivityPreviewQueryVariables>) {
        return Apollo.useQuery<ActivityPreviewQuery, ActivityPreviewQueryVariables>(ActivityPreviewDocument, baseOptions);
      }
export function useActivityPreviewLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ActivityPreviewQuery, ActivityPreviewQueryVariables>) {
          return Apollo.useLazyQuery<ActivityPreviewQuery, ActivityPreviewQueryVariables>(ActivityPreviewDocument, baseOptions);
        }
export type ActivityPreviewQueryHookResult = ReturnType<typeof useActivityPreviewQuery>;
export type ActivityPreviewLazyQueryHookResult = ReturnType<typeof useActivityPreviewLazyQuery>;
export type ActivityPreviewQueryResult = Apollo.QueryResult<ActivityPreviewQuery, ActivityPreviewQueryVariables>;
export const MarkActivityAsReadDocument = gql`
    mutation MarkActivityAsRead($id: ID, $read: Boolean) {
  markActivityAsRead(input: {id: $id, read: $read}) {
    errors {
      field
      messages
    }
    activity {
      id
      description
      read
      targetUser {
        id
        username
        avatarThumbnail
      }
      course {
        id
      }
      resource {
        id
      }
      comment {
        id
      }
    }
  }
}
    `;
export type MarkActivityAsReadMutationFn = Apollo.MutationFunction<MarkActivityAsReadMutation, MarkActivityAsReadMutationVariables>;

/**
 * __useMarkActivityAsReadMutation__
 *
 * To run a mutation, you first call `useMarkActivityAsReadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMarkActivityAsReadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [markActivityAsReadMutation, { data, loading, error }] = useMarkActivityAsReadMutation({
 *   variables: {
 *      id: // value for 'id'
 *      read: // value for 'read'
 *   },
 * });
 */
export function useMarkActivityAsReadMutation(baseOptions?: Apollo.MutationHookOptions<MarkActivityAsReadMutation, MarkActivityAsReadMutationVariables>) {
        return Apollo.useMutation<MarkActivityAsReadMutation, MarkActivityAsReadMutationVariables>(MarkActivityAsReadDocument, baseOptions);
      }
export type MarkActivityAsReadMutationHookResult = ReturnType<typeof useMarkActivityAsReadMutation>;
export type MarkActivityAsReadMutationResult = Apollo.MutationResult<MarkActivityAsReadMutation>;
export type MarkActivityAsReadMutationOptions = Apollo.BaseMutationOptions<MarkActivityAsReadMutation, MarkActivityAsReadMutationVariables>;
export const GraphQlMarkAllActivitiesAsReadDocument = gql`
    mutation GraphQLMarkAllActivitiesAsRead {
  markAllActivitiesAsRead {
    errors {
      field
      messages
    }
    activities {
      page
      pages
      hasNext
      hasPrev
      count
      objects {
        id
        description
        read
        targetUser {
          id
          username
          avatarThumbnail
        }
        course {
          id
        }
        resource {
          id
        }
        comment {
          id
        }
      }
    }
  }
}
    `;
export type GraphQlMarkAllActivitiesAsReadMutationFn = Apollo.MutationFunction<GraphQlMarkAllActivitiesAsReadMutation, GraphQlMarkAllActivitiesAsReadMutationVariables>;

/**
 * __useGraphQlMarkAllActivitiesAsReadMutation__
 *
 * To run a mutation, you first call `useGraphQlMarkAllActivitiesAsReadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGraphQlMarkAllActivitiesAsReadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [graphQlMarkAllActivitiesAsReadMutation, { data, loading, error }] = useGraphQlMarkAllActivitiesAsReadMutation({
 *   variables: {
 *   },
 * });
 */
export function useGraphQlMarkAllActivitiesAsReadMutation(baseOptions?: Apollo.MutationHookOptions<GraphQlMarkAllActivitiesAsReadMutation, GraphQlMarkAllActivitiesAsReadMutationVariables>) {
        return Apollo.useMutation<GraphQlMarkAllActivitiesAsReadMutation, GraphQlMarkAllActivitiesAsReadMutationVariables>(GraphQlMarkAllActivitiesAsReadDocument, baseOptions);
      }
export type GraphQlMarkAllActivitiesAsReadMutationHookResult = ReturnType<typeof useGraphQlMarkAllActivitiesAsReadMutation>;
export type GraphQlMarkAllActivitiesAsReadMutationResult = Apollo.MutationResult<GraphQlMarkAllActivitiesAsReadMutation>;
export type GraphQlMarkAllActivitiesAsReadMutationOptions = Apollo.BaseMutationOptions<GraphQlMarkAllActivitiesAsReadMutation, GraphQlMarkAllActivitiesAsReadMutationVariables>;
export const AutocompleteCitiesDocument = gql`
    query AutocompleteCities {
  autocompleteCities {
    id
    name
  }
}
    `;

/**
 * __useAutocompleteCitiesQuery__
 *
 * To run a query within a React component, call `useAutocompleteCitiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAutocompleteCitiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAutocompleteCitiesQuery({
 *   variables: {
 *   },
 * });
 */
export function useAutocompleteCitiesQuery(baseOptions?: Apollo.QueryHookOptions<AutocompleteCitiesQuery, AutocompleteCitiesQueryVariables>) {
        return Apollo.useQuery<AutocompleteCitiesQuery, AutocompleteCitiesQueryVariables>(AutocompleteCitiesDocument, baseOptions);
      }
export function useAutocompleteCitiesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AutocompleteCitiesQuery, AutocompleteCitiesQueryVariables>) {
          return Apollo.useLazyQuery<AutocompleteCitiesQuery, AutocompleteCitiesQueryVariables>(AutocompleteCitiesDocument, baseOptions);
        }
export type AutocompleteCitiesQueryHookResult = ReturnType<typeof useAutocompleteCitiesQuery>;
export type AutocompleteCitiesLazyQueryHookResult = ReturnType<typeof useAutocompleteCitiesLazyQuery>;
export type AutocompleteCitiesQueryResult = Apollo.QueryResult<AutocompleteCitiesQuery, AutocompleteCitiesQueryVariables>;
export const CreateCommentDocument = gql`
    mutation CreateComment($user: String, $text: String!, $attachment: String, $course: ID, $resource: ID, $comment: ID, $school: ID) {
  createComment(
    input: {user: $user, text: $text, attachment: $attachment, course: $course, resource: $resource, comment: $comment, school: $school}
  ) {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;

/**
 * __useCreateCommentMutation__
 *
 * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({
 *   variables: {
 *      user: // value for 'user'
 *      text: // value for 'text'
 *      attachment: // value for 'attachment'
 *      course: // value for 'course'
 *      resource: // value for 'resource'
 *      comment: // value for 'comment'
 *      school: // value for 'school'
 *   },
 * });
 */
export function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {
        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, baseOptions);
      }
export type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;
export type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;
export type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;
export const DeleteCommentDocument = gql`
    mutation DeleteComment($id: ID) {
  deleteComment(input: {id: $id}) {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type DeleteCommentMutationFn = Apollo.MutationFunction<DeleteCommentMutation, DeleteCommentMutationVariables>;

/**
 * __useDeleteCommentMutation__
 *
 * To run a mutation, you first call `useDeleteCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCommentMutation, { data, loading, error }] = useDeleteCommentMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCommentMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCommentMutation, DeleteCommentMutationVariables>) {
        return Apollo.useMutation<DeleteCommentMutation, DeleteCommentMutationVariables>(DeleteCommentDocument, baseOptions);
      }
export type DeleteCommentMutationHookResult = ReturnType<typeof useDeleteCommentMutation>;
export type DeleteCommentMutationResult = Apollo.MutationResult<DeleteCommentMutation>;
export type DeleteCommentMutationOptions = Apollo.BaseMutationOptions<DeleteCommentMutation, DeleteCommentMutationVariables>;
export const CreateContactMessageDocument = gql`
    mutation CreateContactMessage($subject: String!, $name: String, $email: String!, $message: String!) {
  createContactMessage(
    input: {subject: $subject, name: $name, email: $email, message: $message}
  ) {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type CreateContactMessageMutationFn = Apollo.MutationFunction<CreateContactMessageMutation, CreateContactMessageMutationVariables>;

/**
 * __useCreateContactMessageMutation__
 *
 * To run a mutation, you first call `useCreateContactMessageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateContactMessageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createContactMessageMutation, { data, loading, error }] = useCreateContactMessageMutation({
 *   variables: {
 *      subject: // value for 'subject'
 *      name: // value for 'name'
 *      email: // value for 'email'
 *      message: // value for 'message'
 *   },
 * });
 */
export function useCreateContactMessageMutation(baseOptions?: Apollo.MutationHookOptions<CreateContactMessageMutation, CreateContactMessageMutationVariables>) {
        return Apollo.useMutation<CreateContactMessageMutation, CreateContactMessageMutationVariables>(CreateContactMessageDocument, baseOptions);
      }
export type CreateContactMessageMutationHookResult = ReturnType<typeof useCreateContactMessageMutation>;
export type CreateContactMessageMutationResult = Apollo.MutationResult<CreateContactMessageMutation>;
export type CreateContactMessageMutationOptions = Apollo.BaseMutationOptions<CreateContactMessageMutation, CreateContactMessageMutationVariables>;
export const AutocompleteCountriesDocument = gql`
    query AutocompleteCountries {
  autocompleteCountries {
    id
    name
  }
}
    `;

/**
 * __useAutocompleteCountriesQuery__
 *
 * To run a query within a React component, call `useAutocompleteCountriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAutocompleteCountriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAutocompleteCountriesQuery({
 *   variables: {
 *   },
 * });
 */
export function useAutocompleteCountriesQuery(baseOptions?: Apollo.QueryHookOptions<AutocompleteCountriesQuery, AutocompleteCountriesQueryVariables>) {
        return Apollo.useQuery<AutocompleteCountriesQuery, AutocompleteCountriesQueryVariables>(AutocompleteCountriesDocument, baseOptions);
      }
export function useAutocompleteCountriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AutocompleteCountriesQuery, AutocompleteCountriesQueryVariables>) {
          return Apollo.useLazyQuery<AutocompleteCountriesQuery, AutocompleteCountriesQueryVariables>(AutocompleteCountriesDocument, baseOptions);
        }
export type AutocompleteCountriesQueryHookResult = ReturnType<typeof useAutocompleteCountriesQuery>;
export type AutocompleteCountriesLazyQueryHookResult = ReturnType<typeof useAutocompleteCountriesLazyQuery>;
export type AutocompleteCountriesQueryResult = Apollo.QueryResult<AutocompleteCountriesQuery, AutocompleteCountriesQueryVariables>;
export const CoursesDocument = gql`
    query Courses($searchTerm: String, $school: ID, $subject: ID, $schoolType: ID, $country: ID, $city: ID, $ordering: String, $page: Int, $pageSize: Int) {
  courses(
    searchTerm: $searchTerm
    school: $school
    subject: $subject
    schoolType: $schoolType
    country: $country
    city: $city
    ordering: $ordering
    page: $page
    pageSize: $pageSize
  ) {
    page
    pages
    hasPrev
    hasNext
    count
    objects {
      id
      name
      code
      score
      starCount
      resourceCount
      commentCount
      created
      user {
        id
        username
      }
    }
  }
  school(id: $school) {
    id
    name
  }
  subject(id: $subject) {
    id
    name
  }
  schoolType(id: $schoolType) {
    id
    name
  }
  country(id: $country) {
    id
    name
  }
  city(id: $city) {
    id
    name
  }
}
    `;

/**
 * __useCoursesQuery__
 *
 * To run a query within a React component, call `useCoursesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCoursesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCoursesQuery({
 *   variables: {
 *      searchTerm: // value for 'searchTerm'
 *      school: // value for 'school'
 *      subject: // value for 'subject'
 *      schoolType: // value for 'schoolType'
 *      country: // value for 'country'
 *      city: // value for 'city'
 *      ordering: // value for 'ordering'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useCoursesQuery(baseOptions?: Apollo.QueryHookOptions<CoursesQuery, CoursesQueryVariables>) {
        return Apollo.useQuery<CoursesQuery, CoursesQueryVariables>(CoursesDocument, baseOptions);
      }
export function useCoursesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CoursesQuery, CoursesQueryVariables>) {
          return Apollo.useLazyQuery<CoursesQuery, CoursesQueryVariables>(CoursesDocument, baseOptions);
        }
export type CoursesQueryHookResult = ReturnType<typeof useCoursesQuery>;
export type CoursesLazyQueryHookResult = ReturnType<typeof useCoursesLazyQuery>;
export type CoursesQueryResult = Apollo.QueryResult<CoursesQuery, CoursesQueryVariables>;
export const CourseDocument = gql`
    query Course($id: ID, $page: Int, $pageSize: Int) {
  course(id: $id) {
    id
    name
    code
    modified
    created
    score
    starred
    starCount
    commentCount
    vote {
      id
      status
    }
    subjects {
      id
      name
    }
    school {
      id
      name
    }
    user {
      id
      username
    }
  }
  resources(course: $id, page: $page, pageSize: $pageSize) {
    page
    pages
    hasNext
    hasPrev
    count
    objects {
      id
      title
      score
      date
      starCount
      commentCount
      downloads
      created
      resourceType {
        name
      }
      user {
        id
        username
      }
    }
  }
}
    `;

/**
 * __useCourseQuery__
 *
 * To run a query within a React component, call `useCourseQuery` and pass it any options that fit your needs.
 * When your component renders, `useCourseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCourseQuery({
 *   variables: {
 *      id: // value for 'id'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useCourseQuery(baseOptions?: Apollo.QueryHookOptions<CourseQuery, CourseQueryVariables>) {
        return Apollo.useQuery<CourseQuery, CourseQueryVariables>(CourseDocument, baseOptions);
      }
export function useCourseLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CourseQuery, CourseQueryVariables>) {
          return Apollo.useLazyQuery<CourseQuery, CourseQueryVariables>(CourseDocument, baseOptions);
        }
export type CourseQueryHookResult = ReturnType<typeof useCourseQuery>;
export type CourseLazyQueryHookResult = ReturnType<typeof useCourseLazyQuery>;
export type CourseQueryResult = Apollo.QueryResult<CourseQuery, CourseQueryVariables>;
export const CourseSeoPropsDocument = gql`
    query CourseSeoProps($id: ID) {
  course(id: $id) {
    name
    code
  }
}
    `;

/**
 * __useCourseSeoPropsQuery__
 *
 * To run a query within a React component, call `useCourseSeoPropsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCourseSeoPropsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCourseSeoPropsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useCourseSeoPropsQuery(baseOptions?: Apollo.QueryHookOptions<CourseSeoPropsQuery, CourseSeoPropsQueryVariables>) {
        return Apollo.useQuery<CourseSeoPropsQuery, CourseSeoPropsQueryVariables>(CourseSeoPropsDocument, baseOptions);
      }
export function useCourseSeoPropsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CourseSeoPropsQuery, CourseSeoPropsQueryVariables>) {
          return Apollo.useLazyQuery<CourseSeoPropsQuery, CourseSeoPropsQueryVariables>(CourseSeoPropsDocument, baseOptions);
        }
export type CourseSeoPropsQueryHookResult = ReturnType<typeof useCourseSeoPropsQuery>;
export type CourseSeoPropsLazyQueryHookResult = ReturnType<typeof useCourseSeoPropsLazyQuery>;
export type CourseSeoPropsQueryResult = Apollo.QueryResult<CourseSeoPropsQuery, CourseSeoPropsQueryVariables>;
export const CreateCourseAutocompleteDataDocument = gql`
    query CreateCourseAutocompleteData($school: ID) {
  school(id: $school) {
    id
    name
  }
}
    `;

/**
 * __useCreateCourseAutocompleteDataQuery__
 *
 * To run a query within a React component, call `useCreateCourseAutocompleteDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useCreateCourseAutocompleteDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCreateCourseAutocompleteDataQuery({
 *   variables: {
 *      school: // value for 'school'
 *   },
 * });
 */
export function useCreateCourseAutocompleteDataQuery(baseOptions?: Apollo.QueryHookOptions<CreateCourseAutocompleteDataQuery, CreateCourseAutocompleteDataQueryVariables>) {
        return Apollo.useQuery<CreateCourseAutocompleteDataQuery, CreateCourseAutocompleteDataQueryVariables>(CreateCourseAutocompleteDataDocument, baseOptions);
      }
export function useCreateCourseAutocompleteDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CreateCourseAutocompleteDataQuery, CreateCourseAutocompleteDataQueryVariables>) {
          return Apollo.useLazyQuery<CreateCourseAutocompleteDataQuery, CreateCourseAutocompleteDataQueryVariables>(CreateCourseAutocompleteDataDocument, baseOptions);
        }
export type CreateCourseAutocompleteDataQueryHookResult = ReturnType<typeof useCreateCourseAutocompleteDataQuery>;
export type CreateCourseAutocompleteDataLazyQueryHookResult = ReturnType<typeof useCreateCourseAutocompleteDataLazyQuery>;
export type CreateCourseAutocompleteDataQueryResult = Apollo.QueryResult<CreateCourseAutocompleteDataQuery, CreateCourseAutocompleteDataQueryVariables>;
export const AutocompleteCoursesDocument = gql`
    query AutocompleteCourses($school: ID, $name: String) {
  autocompleteCourses(school: $school, name: $name) {
    id
    name
    code
  }
}
    `;

/**
 * __useAutocompleteCoursesQuery__
 *
 * To run a query within a React component, call `useAutocompleteCoursesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAutocompleteCoursesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAutocompleteCoursesQuery({
 *   variables: {
 *      school: // value for 'school'
 *      name: // value for 'name'
 *   },
 * });
 */
export function useAutocompleteCoursesQuery(baseOptions?: Apollo.QueryHookOptions<AutocompleteCoursesQuery, AutocompleteCoursesQueryVariables>) {
        return Apollo.useQuery<AutocompleteCoursesQuery, AutocompleteCoursesQueryVariables>(AutocompleteCoursesDocument, baseOptions);
      }
export function useAutocompleteCoursesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AutocompleteCoursesQuery, AutocompleteCoursesQueryVariables>) {
          return Apollo.useLazyQuery<AutocompleteCoursesQuery, AutocompleteCoursesQueryVariables>(AutocompleteCoursesDocument, baseOptions);
        }
export type AutocompleteCoursesQueryHookResult = ReturnType<typeof useAutocompleteCoursesQuery>;
export type AutocompleteCoursesLazyQueryHookResult = ReturnType<typeof useAutocompleteCoursesLazyQuery>;
export type AutocompleteCoursesQueryResult = Apollo.QueryResult<AutocompleteCoursesQuery, AutocompleteCoursesQueryVariables>;
export const CreateCourseDocument = gql`
    mutation CreateCourse($courseName: String!, $courseCode: String, $subjects: [ID], $school: ID!) {
  createCourse(
    input: {name: $courseName, code: $courseCode, subjects: $subjects, school: $school}
  ) {
    successMessage
    course {
      id
    }
    errors {
      field
      messages
    }
  }
}
    `;
export type CreateCourseMutationFn = Apollo.MutationFunction<CreateCourseMutation, CreateCourseMutationVariables>;

/**
 * __useCreateCourseMutation__
 *
 * To run a mutation, you first call `useCreateCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCourseMutation, { data, loading, error }] = useCreateCourseMutation({
 *   variables: {
 *      courseName: // value for 'courseName'
 *      courseCode: // value for 'courseCode'
 *      subjects: // value for 'subjects'
 *      school: // value for 'school'
 *   },
 * });
 */
export function useCreateCourseMutation(baseOptions?: Apollo.MutationHookOptions<CreateCourseMutation, CreateCourseMutationVariables>) {
        return Apollo.useMutation<CreateCourseMutation, CreateCourseMutationVariables>(CreateCourseDocument, baseOptions);
      }
export type CreateCourseMutationHookResult = ReturnType<typeof useCreateCourseMutation>;
export type CreateCourseMutationResult = Apollo.MutationResult<CreateCourseMutation>;
export type CreateCourseMutationOptions = Apollo.BaseMutationOptions<CreateCourseMutation, CreateCourseMutationVariables>;
export const DeleteCourseDocument = gql`
    mutation DeleteCourse($id: ID) {
  deleteCourse(input: {id: $id}) {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type DeleteCourseMutationFn = Apollo.MutationFunction<DeleteCourseMutation, DeleteCourseMutationVariables>;

/**
 * __useDeleteCourseMutation__
 *
 * To run a mutation, you first call `useDeleteCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCourseMutation, { data, loading, error }] = useDeleteCourseMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCourseMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCourseMutation, DeleteCourseMutationVariables>) {
        return Apollo.useMutation<DeleteCourseMutation, DeleteCourseMutationVariables>(DeleteCourseDocument, baseOptions);
      }
export type DeleteCourseMutationHookResult = ReturnType<typeof useDeleteCourseMutation>;
export type DeleteCourseMutationResult = Apollo.MutationResult<DeleteCourseMutation>;
export type DeleteCourseMutationOptions = Apollo.BaseMutationOptions<DeleteCourseMutation, DeleteCourseMutationVariables>;
export const ResourceDocument = gql`
    query Resource($id: ID) {
  resource(id: $id) {
    id
    title
    file
    date
    modified
    created
    score
    starred
    starCount
    downloads
    commentCount
    resourceType {
      id
      name
    }
    school {
      id
      name
    }
    course {
      id
      name
    }
    user {
      id
      username
    }
    vote {
      id
      status
    }
  }
}
    `;

/**
 * __useResourceQuery__
 *
 * To run a query within a React component, call `useResourceQuery` and pass it any options that fit your needs.
 * When your component renders, `useResourceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useResourceQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useResourceQuery(baseOptions?: Apollo.QueryHookOptions<ResourceQuery, ResourceQueryVariables>) {
        return Apollo.useQuery<ResourceQuery, ResourceQueryVariables>(ResourceDocument, baseOptions);
      }
export function useResourceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ResourceQuery, ResourceQueryVariables>) {
          return Apollo.useLazyQuery<ResourceQuery, ResourceQueryVariables>(ResourceDocument, baseOptions);
        }
export type ResourceQueryHookResult = ReturnType<typeof useResourceQuery>;
export type ResourceLazyQueryHookResult = ReturnType<typeof useResourceLazyQuery>;
export type ResourceQueryResult = Apollo.QueryResult<ResourceQuery, ResourceQueryVariables>;
export const ResourceSeoPropsDocument = gql`
    query ResourceSeoProps($id: ID) {
  resource(id: $id) {
    title
    date
  }
}
    `;

/**
 * __useResourceSeoPropsQuery__
 *
 * To run a query within a React component, call `useResourceSeoPropsQuery` and pass it any options that fit your needs.
 * When your component renders, `useResourceSeoPropsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useResourceSeoPropsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useResourceSeoPropsQuery(baseOptions?: Apollo.QueryHookOptions<ResourceSeoPropsQuery, ResourceSeoPropsQueryVariables>) {
        return Apollo.useQuery<ResourceSeoPropsQuery, ResourceSeoPropsQueryVariables>(ResourceSeoPropsDocument, baseOptions);
      }
export function useResourceSeoPropsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ResourceSeoPropsQuery, ResourceSeoPropsQueryVariables>) {
          return Apollo.useLazyQuery<ResourceSeoPropsQuery, ResourceSeoPropsQueryVariables>(ResourceSeoPropsDocument, baseOptions);
        }
export type ResourceSeoPropsQueryHookResult = ReturnType<typeof useResourceSeoPropsQuery>;
export type ResourceSeoPropsLazyQueryHookResult = ReturnType<typeof useResourceSeoPropsLazyQuery>;
export type ResourceSeoPropsQueryResult = Apollo.QueryResult<ResourceSeoPropsQuery, ResourceSeoPropsQueryVariables>;
export const CreateResourceAutocompleteDataDocument = gql`
    query CreateResourceAutocompleteData($school: ID, $course: ID) {
  school(id: $school) {
    id
    name
  }
  course(id: $course) {
    id
    name
    code
  }
}
    `;

/**
 * __useCreateResourceAutocompleteDataQuery__
 *
 * To run a query within a React component, call `useCreateResourceAutocompleteDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useCreateResourceAutocompleteDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCreateResourceAutocompleteDataQuery({
 *   variables: {
 *      school: // value for 'school'
 *      course: // value for 'course'
 *   },
 * });
 */
export function useCreateResourceAutocompleteDataQuery(baseOptions?: Apollo.QueryHookOptions<CreateResourceAutocompleteDataQuery, CreateResourceAutocompleteDataQueryVariables>) {
        return Apollo.useQuery<CreateResourceAutocompleteDataQuery, CreateResourceAutocompleteDataQueryVariables>(CreateResourceAutocompleteDataDocument, baseOptions);
      }
export function useCreateResourceAutocompleteDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CreateResourceAutocompleteDataQuery, CreateResourceAutocompleteDataQueryVariables>) {
          return Apollo.useLazyQuery<CreateResourceAutocompleteDataQuery, CreateResourceAutocompleteDataQueryVariables>(CreateResourceAutocompleteDataDocument, baseOptions);
        }
export type CreateResourceAutocompleteDataQueryHookResult = ReturnType<typeof useCreateResourceAutocompleteDataQuery>;
export type CreateResourceAutocompleteDataLazyQueryHookResult = ReturnType<typeof useCreateResourceAutocompleteDataLazyQuery>;
export type CreateResourceAutocompleteDataQueryResult = Apollo.QueryResult<CreateResourceAutocompleteDataQuery, CreateResourceAutocompleteDataQueryVariables>;
export const AutocompleteResourceTypesDocument = gql`
    query AutocompleteResourceTypes {
  autocompleteResourceTypes {
    id
    name
  }
}
    `;

/**
 * __useAutocompleteResourceTypesQuery__
 *
 * To run a query within a React component, call `useAutocompleteResourceTypesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAutocompleteResourceTypesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAutocompleteResourceTypesQuery({
 *   variables: {
 *   },
 * });
 */
export function useAutocompleteResourceTypesQuery(baseOptions?: Apollo.QueryHookOptions<AutocompleteResourceTypesQuery, AutocompleteResourceTypesQueryVariables>) {
        return Apollo.useQuery<AutocompleteResourceTypesQuery, AutocompleteResourceTypesQueryVariables>(AutocompleteResourceTypesDocument, baseOptions);
      }
export function useAutocompleteResourceTypesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AutocompleteResourceTypesQuery, AutocompleteResourceTypesQueryVariables>) {
          return Apollo.useLazyQuery<AutocompleteResourceTypesQuery, AutocompleteResourceTypesQueryVariables>(AutocompleteResourceTypesDocument, baseOptions);
        }
export type AutocompleteResourceTypesQueryHookResult = ReturnType<typeof useAutocompleteResourceTypesQuery>;
export type AutocompleteResourceTypesLazyQueryHookResult = ReturnType<typeof useAutocompleteResourceTypesLazyQuery>;
export type AutocompleteResourceTypesQueryResult = Apollo.QueryResult<AutocompleteResourceTypesQuery, AutocompleteResourceTypesQueryVariables>;
export const CreateResourceDocument = gql`
    mutation CreateResource($resourceTitle: String!, $resourceType: ID!, $date: Date, $course: ID!, $file: String!) {
  createResource(
    input: {title: $resourceTitle, resourceType: $resourceType, date: $date, course: $course, file: $file}
  ) {
    successMessage
    resource {
      id
    }
    errors {
      field
      messages
    }
  }
}
    `;
export type CreateResourceMutationFn = Apollo.MutationFunction<CreateResourceMutation, CreateResourceMutationVariables>;

/**
 * __useCreateResourceMutation__
 *
 * To run a mutation, you first call `useCreateResourceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateResourceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createResourceMutation, { data, loading, error }] = useCreateResourceMutation({
 *   variables: {
 *      resourceTitle: // value for 'resourceTitle'
 *      resourceType: // value for 'resourceType'
 *      date: // value for 'date'
 *      course: // value for 'course'
 *      file: // value for 'file'
 *   },
 * });
 */
export function useCreateResourceMutation(baseOptions?: Apollo.MutationHookOptions<CreateResourceMutation, CreateResourceMutationVariables>) {
        return Apollo.useMutation<CreateResourceMutation, CreateResourceMutationVariables>(CreateResourceDocument, baseOptions);
      }
export type CreateResourceMutationHookResult = ReturnType<typeof useCreateResourceMutation>;
export type CreateResourceMutationResult = Apollo.MutationResult<CreateResourceMutation>;
export type CreateResourceMutationOptions = Apollo.BaseMutationOptions<CreateResourceMutation, CreateResourceMutationVariables>;
export const DeleteResourceDocument = gql`
    mutation DeleteResource($id: ID) {
  deleteResource(input: {id: $id}) {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type DeleteResourceMutationFn = Apollo.MutationFunction<DeleteResourceMutation, DeleteResourceMutationVariables>;

/**
 * __useDeleteResourceMutation__
 *
 * To run a mutation, you first call `useDeleteResourceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteResourceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteResourceMutation, { data, loading, error }] = useDeleteResourceMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteResourceMutation(baseOptions?: Apollo.MutationHookOptions<DeleteResourceMutation, DeleteResourceMutationVariables>) {
        return Apollo.useMutation<DeleteResourceMutation, DeleteResourceMutationVariables>(DeleteResourceDocument, baseOptions);
      }
export type DeleteResourceMutationHookResult = ReturnType<typeof useDeleteResourceMutation>;
export type DeleteResourceMutationResult = Apollo.MutationResult<DeleteResourceMutation>;
export type DeleteResourceMutationOptions = Apollo.BaseMutationOptions<DeleteResourceMutation, DeleteResourceMutationVariables>;
export const DownloadResourceDocument = gql`
    mutation DownloadResource($id: ID) {
  downloadResource(input: {id: $id}) {
    resource {
      downloads
    }
    errors {
      field
      messages
    }
  }
}
    `;
export type DownloadResourceMutationFn = Apollo.MutationFunction<DownloadResourceMutation, DownloadResourceMutationVariables>;

/**
 * __useDownloadResourceMutation__
 *
 * To run a mutation, you first call `useDownloadResourceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDownloadResourceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [downloadResourceMutation, { data, loading, error }] = useDownloadResourceMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDownloadResourceMutation(baseOptions?: Apollo.MutationHookOptions<DownloadResourceMutation, DownloadResourceMutationVariables>) {
        return Apollo.useMutation<DownloadResourceMutation, DownloadResourceMutationVariables>(DownloadResourceDocument, baseOptions);
      }
export type DownloadResourceMutationHookResult = ReturnType<typeof useDownloadResourceMutation>;
export type DownloadResourceMutationResult = Apollo.MutationResult<DownloadResourceMutation>;
export type DownloadResourceMutationOptions = Apollo.BaseMutationOptions<DownloadResourceMutation, DownloadResourceMutationVariables>;
export const SchoolDocument = gql`
    query School($id: ID, $page: Int, $pageSize: Int) {
  school(id: $id) {
    id
    name
    city {
      id
      name
    }
    country {
      id
      name
    }
    schoolType {
      id
      name
    }
  }
  subjects(school: $id, page: $page, pageSize: $pageSize) {
    page
    pages
    hasNext
    hasPrev
    count
    objects {
      id
      name
      courseCount
      resourceCount
    }
  }
  courses(school: $id, page: $page, pageSize: $pageSize) {
    page
    pages
    hasNext
    hasPrev
    count
    objects {
      id
      name
      code
      score
      starCount
      resourceCount
      commentCount
      user {
        id
        username
      }
    }
  }
}
    `;

/**
 * __useSchoolQuery__
 *
 * To run a query within a React component, call `useSchoolQuery` and pass it any options that fit your needs.
 * When your component renders, `useSchoolQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSchoolQuery({
 *   variables: {
 *      id: // value for 'id'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useSchoolQuery(baseOptions?: Apollo.QueryHookOptions<SchoolQuery, SchoolQueryVariables>) {
        return Apollo.useQuery<SchoolQuery, SchoolQueryVariables>(SchoolDocument, baseOptions);
      }
export function useSchoolLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SchoolQuery, SchoolQueryVariables>) {
          return Apollo.useLazyQuery<SchoolQuery, SchoolQueryVariables>(SchoolDocument, baseOptions);
        }
export type SchoolQueryHookResult = ReturnType<typeof useSchoolQuery>;
export type SchoolLazyQueryHookResult = ReturnType<typeof useSchoolLazyQuery>;
export type SchoolQueryResult = Apollo.QueryResult<SchoolQuery, SchoolQueryVariables>;
export const AutocompleteSchoolsDocument = gql`
    query AutocompleteSchools($name: String) {
  autocompleteSchools(name: $name) {
    id
    name
  }
}
    `;

/**
 * __useAutocompleteSchoolsQuery__
 *
 * To run a query within a React component, call `useAutocompleteSchoolsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAutocompleteSchoolsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAutocompleteSchoolsQuery({
 *   variables: {
 *      name: // value for 'name'
 *   },
 * });
 */
export function useAutocompleteSchoolsQuery(baseOptions?: Apollo.QueryHookOptions<AutocompleteSchoolsQuery, AutocompleteSchoolsQueryVariables>) {
        return Apollo.useQuery<AutocompleteSchoolsQuery, AutocompleteSchoolsQueryVariables>(AutocompleteSchoolsDocument, baseOptions);
      }
export function useAutocompleteSchoolsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AutocompleteSchoolsQuery, AutocompleteSchoolsQueryVariables>) {
          return Apollo.useLazyQuery<AutocompleteSchoolsQuery, AutocompleteSchoolsQueryVariables>(AutocompleteSchoolsDocument, baseOptions);
        }
export type AutocompleteSchoolsQueryHookResult = ReturnType<typeof useAutocompleteSchoolsQuery>;
export type AutocompleteSchoolsLazyQueryHookResult = ReturnType<typeof useAutocompleteSchoolsLazyQuery>;
export type AutocompleteSchoolsQueryResult = Apollo.QueryResult<AutocompleteSchoolsQuery, AutocompleteSchoolsQueryVariables>;
export const AutocompleteSchoolTypesDocument = gql`
    query AutocompleteSchoolTypes {
  autocompleteSchoolTypes {
    id
    name
  }
}
    `;

/**
 * __useAutocompleteSchoolTypesQuery__
 *
 * To run a query within a React component, call `useAutocompleteSchoolTypesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAutocompleteSchoolTypesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAutocompleteSchoolTypesQuery({
 *   variables: {
 *   },
 * });
 */
export function useAutocompleteSchoolTypesQuery(baseOptions?: Apollo.QueryHookOptions<AutocompleteSchoolTypesQuery, AutocompleteSchoolTypesQueryVariables>) {
        return Apollo.useQuery<AutocompleteSchoolTypesQuery, AutocompleteSchoolTypesQueryVariables>(AutocompleteSchoolTypesDocument, baseOptions);
      }
export function useAutocompleteSchoolTypesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AutocompleteSchoolTypesQuery, AutocompleteSchoolTypesQueryVariables>) {
          return Apollo.useLazyQuery<AutocompleteSchoolTypesQuery, AutocompleteSchoolTypesQueryVariables>(AutocompleteSchoolTypesDocument, baseOptions);
        }
export type AutocompleteSchoolTypesQueryHookResult = ReturnType<typeof useAutocompleteSchoolTypesQuery>;
export type AutocompleteSchoolTypesLazyQueryHookResult = ReturnType<typeof useAutocompleteSchoolTypesLazyQuery>;
export type AutocompleteSchoolTypesQueryResult = Apollo.QueryResult<AutocompleteSchoolTypesQuery, AutocompleteSchoolTypesQueryVariables>;
export const StarredDocument = gql`
    query Starred($page: Int, $pageSize: Int) {
  starredCourses(page: $page, pageSize: $pageSize) {
    page
    pages
    hasNext
    hasPrev
    count
    objects {
      id
      name
      code
      score
      starCount
      resourceCount
      commentCount
      user {
        id
        username
      }
    }
  }
  starredResources {
    page
    pages
    hasNext
    hasPrev
    count
    objects {
      id
      title
      score
      date
      starCount
      commentCount
      course {
        name
        code
      }
      downloads
      resourceType {
        name
      }
    }
  }
}
    `;

/**
 * __useStarredQuery__
 *
 * To run a query within a React component, call `useStarredQuery` and pass it any options that fit your needs.
 * When your component renders, `useStarredQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStarredQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useStarredQuery(baseOptions?: Apollo.QueryHookOptions<StarredQuery, StarredQueryVariables>) {
        return Apollo.useQuery<StarredQuery, StarredQueryVariables>(StarredDocument, baseOptions);
      }
export function useStarredLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<StarredQuery, StarredQueryVariables>) {
          return Apollo.useLazyQuery<StarredQuery, StarredQueryVariables>(StarredDocument, baseOptions);
        }
export type StarredQueryHookResult = ReturnType<typeof useStarredQuery>;
export type StarredLazyQueryHookResult = ReturnType<typeof useStarredLazyQuery>;
export type StarredQueryResult = Apollo.QueryResult<StarredQuery, StarredQueryVariables>;
export const StarDocument = gql`
    mutation Star($course: ID, $resource: ID) {
  star(input: {course: $course, resource: $resource}) {
    starred
    errors {
      field
      messages
    }
  }
}
    `;
export type StarMutationFn = Apollo.MutationFunction<StarMutation, StarMutationVariables>;

/**
 * __useStarMutation__
 *
 * To run a mutation, you first call `useStarMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useStarMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [starMutation, { data, loading, error }] = useStarMutation({
 *   variables: {
 *      course: // value for 'course'
 *      resource: // value for 'resource'
 *   },
 * });
 */
export function useStarMutation(baseOptions?: Apollo.MutationHookOptions<StarMutation, StarMutationVariables>) {
        return Apollo.useMutation<StarMutation, StarMutationVariables>(StarDocument, baseOptions);
      }
export type StarMutationHookResult = ReturnType<typeof useStarMutation>;
export type StarMutationResult = Apollo.MutationResult<StarMutation>;
export type StarMutationOptions = Apollo.BaseMutationOptions<StarMutation, StarMutationVariables>;
export const AutocompleteSubjectsDocument = gql`
    query AutocompleteSubjects($name: String) {
  autocompleteSubjects(name: $name) {
    id
    name
  }
}
    `;

/**
 * __useAutocompleteSubjectsQuery__
 *
 * To run a query within a React component, call `useAutocompleteSubjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAutocompleteSubjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAutocompleteSubjectsQuery({
 *   variables: {
 *      name: // value for 'name'
 *   },
 * });
 */
export function useAutocompleteSubjectsQuery(baseOptions?: Apollo.QueryHookOptions<AutocompleteSubjectsQuery, AutocompleteSubjectsQueryVariables>) {
        return Apollo.useQuery<AutocompleteSubjectsQuery, AutocompleteSubjectsQueryVariables>(AutocompleteSubjectsDocument, baseOptions);
      }
export function useAutocompleteSubjectsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AutocompleteSubjectsQuery, AutocompleteSubjectsQueryVariables>) {
          return Apollo.useLazyQuery<AutocompleteSubjectsQuery, AutocompleteSubjectsQueryVariables>(AutocompleteSubjectsDocument, baseOptions);
        }
export type AutocompleteSubjectsQueryHookResult = ReturnType<typeof useAutocompleteSubjectsQuery>;
export type AutocompleteSubjectsLazyQueryHookResult = ReturnType<typeof useAutocompleteSubjectsLazyQuery>;
export type AutocompleteSubjectsQueryResult = Apollo.QueryResult<AutocompleteSubjectsQuery, AutocompleteSubjectsQueryVariables>;
export const UserMeDocument = gql`
    query UserMe {
  userMe {
    id
    username
    email
    title
    bio
    avatar
    avatarThumbnail
    score
    created
    verified
    unreadActivityCount
    school {
      id
      name
    }
    subject {
      id
      name
    }
  }
}
    `;

/**
 * __useUserMeQuery__
 *
 * To run a query within a React component, call `useUserMeQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserMeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserMeQuery({
 *   variables: {
 *   },
 * });
 */
export function useUserMeQuery(baseOptions?: Apollo.QueryHookOptions<UserMeQuery, UserMeQueryVariables>) {
        return Apollo.useQuery<UserMeQuery, UserMeQueryVariables>(UserMeDocument, baseOptions);
      }
export function useUserMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserMeQuery, UserMeQueryVariables>) {
          return Apollo.useLazyQuery<UserMeQuery, UserMeQueryVariables>(UserMeDocument, baseOptions);
        }
export type UserMeQueryHookResult = ReturnType<typeof useUserMeQuery>;
export type UserMeLazyQueryHookResult = ReturnType<typeof useUserMeLazyQuery>;
export type UserMeQueryResult = Apollo.QueryResult<UserMeQuery, UserMeQueryVariables>;
export const UserDocument = gql`
    query User($id: ID, $page: Int, $pageSize: Int) {
  user(id: $id) {
    id
    username
    title
    bio
    avatar
    score
    created
    verified
    rank
    badges {
      id
      name
      description
    }
  }
  courses(user: $id, page: $page, pageSize: $pageSize) {
    page
    pages
    hasNext
    hasPrev
    count
    objects {
      id
      name
      code
      score
      starCount
      resourceCount
      commentCount
      created
      user {
        id
        username
      }
    }
  }
  resources(user: $id, page: $page, pageSize: $pageSize) {
    page
    pages
    hasNext
    hasPrev
    count
    objects {
      id
      title
      score
      date
      starCount
      commentCount
      downloads
      created
      course {
        name
        code
      }
      resourceType {
        name
      }
      user {
        id
        username
      }
    }
  }
  comments(user: $id, page: $page, pageSize: $pageSize) {
    page
    pages
    hasNext
    hasPrev
    count
    objects {
      id
      text
      attachment
      created
      score
      replyCount
      user {
        id
        username
        avatarThumbnail
      }
      course {
        id
        name
      }
      resource {
        id
        title
      }
      comment {
        course {
          id
        }
        resource {
          id
        }
      }
    }
  }
}
    `;

/**
 * __useUserQuery__
 *
 * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserQuery({
 *   variables: {
 *      id: // value for 'id'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useUserQuery(baseOptions?: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>) {
        return Apollo.useQuery<UserQuery, UserQueryVariables>(UserDocument, baseOptions);
      }
export function useUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>) {
          return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(UserDocument, baseOptions);
        }
export type UserQueryHookResult = ReturnType<typeof useUserQuery>;
export type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;
export type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;
export const RegisterDocument = gql`
    mutation Register($username: String!, $email: String!, $password: String!) {
  register(input: {username: $username, email: $email, password: $password}) {
    errors {
      field
      messages
    }
  }
  login(input: {usernameOrEmail: $username, password: $password}) {
    user {
      username
      email
    }
    errors {
      field
      messages
    }
  }
}
    `;
export type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;

/**
 * __useRegisterMutation__
 *
 * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRegisterMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [registerMutation, { data, loading, error }] = useRegisterMutation({
 *   variables: {
 *      username: // value for 'username'
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {
        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, baseOptions);
      }
export type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;
export type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;
export type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;
export const LoginDocument = gql`
    mutation Login($usernameOrEmail: String!, $password: String!) {
  login(input: {usernameOrEmail: $usernameOrEmail, password: $password}) {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      usernameOrEmail: // value for 'usernameOrEmail'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export const GraphQlLogoutDocument = gql`
    mutation GraphQLLogout {
  logout {
    deleted
  }
}
    `;
export type GraphQlLogoutMutationFn = Apollo.MutationFunction<GraphQlLogoutMutation, GraphQlLogoutMutationVariables>;

/**
 * __useGraphQlLogoutMutation__
 *
 * To run a mutation, you first call `useGraphQlLogoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGraphQlLogoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [graphQlLogoutMutation, { data, loading, error }] = useGraphQlLogoutMutation({
 *   variables: {
 *   },
 * });
 */
export function useGraphQlLogoutMutation(baseOptions?: Apollo.MutationHookOptions<GraphQlLogoutMutation, GraphQlLogoutMutationVariables>) {
        return Apollo.useMutation<GraphQlLogoutMutation, GraphQlLogoutMutationVariables>(GraphQlLogoutDocument, baseOptions);
      }
export type GraphQlLogoutMutationHookResult = ReturnType<typeof useGraphQlLogoutMutation>;
export type GraphQlLogoutMutationResult = Apollo.MutationResult<GraphQlLogoutMutation>;
export type GraphQlLogoutMutationOptions = Apollo.BaseMutationOptions<GraphQlLogoutMutation, GraphQlLogoutMutationVariables>;
export const GraphQlResendVerificationEmailDocument = gql`
    mutation GraphQLResendVerificationEmail {
  resendVerificationEmail {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type GraphQlResendVerificationEmailMutationFn = Apollo.MutationFunction<GraphQlResendVerificationEmailMutation, GraphQlResendVerificationEmailMutationVariables>;

/**
 * __useGraphQlResendVerificationEmailMutation__
 *
 * To run a mutation, you first call `useGraphQlResendVerificationEmailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGraphQlResendVerificationEmailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [graphQlResendVerificationEmailMutation, { data, loading, error }] = useGraphQlResendVerificationEmailMutation({
 *   variables: {
 *   },
 * });
 */
export function useGraphQlResendVerificationEmailMutation(baseOptions?: Apollo.MutationHookOptions<GraphQlResendVerificationEmailMutation, GraphQlResendVerificationEmailMutationVariables>) {
        return Apollo.useMutation<GraphQlResendVerificationEmailMutation, GraphQlResendVerificationEmailMutationVariables>(GraphQlResendVerificationEmailDocument, baseOptions);
      }
export type GraphQlResendVerificationEmailMutationHookResult = ReturnType<typeof useGraphQlResendVerificationEmailMutation>;
export type GraphQlResendVerificationEmailMutationResult = Apollo.MutationResult<GraphQlResendVerificationEmailMutation>;
export type GraphQlResendVerificationEmailMutationOptions = Apollo.BaseMutationOptions<GraphQlResendVerificationEmailMutation, GraphQlResendVerificationEmailMutationVariables>;
export const GraphQlMyDataDocument = gql`
    mutation GraphQLMyData {
  myData {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type GraphQlMyDataMutationFn = Apollo.MutationFunction<GraphQlMyDataMutation, GraphQlMyDataMutationVariables>;

/**
 * __useGraphQlMyDataMutation__
 *
 * To run a mutation, you first call `useGraphQlMyDataMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGraphQlMyDataMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [graphQlMyDataMutation, { data, loading, error }] = useGraphQlMyDataMutation({
 *   variables: {
 *   },
 * });
 */
export function useGraphQlMyDataMutation(baseOptions?: Apollo.MutationHookOptions<GraphQlMyDataMutation, GraphQlMyDataMutationVariables>) {
        return Apollo.useMutation<GraphQlMyDataMutation, GraphQlMyDataMutationVariables>(GraphQlMyDataDocument, baseOptions);
      }
export type GraphQlMyDataMutationHookResult = ReturnType<typeof useGraphQlMyDataMutation>;
export type GraphQlMyDataMutationResult = Apollo.MutationResult<GraphQlMyDataMutation>;
export type GraphQlMyDataMutationOptions = Apollo.BaseMutationOptions<GraphQlMyDataMutation, GraphQlMyDataMutationVariables>;
export const VerifyAccountDocument = gql`
    mutation VerifyAccount($token: String) {
  verifyAccount(input: {token: $token}) {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type VerifyAccountMutationFn = Apollo.MutationFunction<VerifyAccountMutation, VerifyAccountMutationVariables>;

/**
 * __useVerifyAccountMutation__
 *
 * To run a mutation, you first call `useVerifyAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVerifyAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [verifyAccountMutation, { data, loading, error }] = useVerifyAccountMutation({
 *   variables: {
 *      token: // value for 'token'
 *   },
 * });
 */
export function useVerifyAccountMutation(baseOptions?: Apollo.MutationHookOptions<VerifyAccountMutation, VerifyAccountMutationVariables>) {
        return Apollo.useMutation<VerifyAccountMutation, VerifyAccountMutationVariables>(VerifyAccountDocument, baseOptions);
      }
export type VerifyAccountMutationHookResult = ReturnType<typeof useVerifyAccountMutation>;
export type VerifyAccountMutationResult = Apollo.MutationResult<VerifyAccountMutation>;
export type VerifyAccountMutationOptions = Apollo.BaseMutationOptions<VerifyAccountMutation, VerifyAccountMutationVariables>;
export const SendPasswordResetEmailDocument = gql`
    mutation SendPasswordResetEmail($email: String!) {
  sendPasswordResetEmail(input: {email: $email}) {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type SendPasswordResetEmailMutationFn = Apollo.MutationFunction<SendPasswordResetEmailMutation, SendPasswordResetEmailMutationVariables>;

/**
 * __useSendPasswordResetEmailMutation__
 *
 * To run a mutation, you first call `useSendPasswordResetEmailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendPasswordResetEmailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendPasswordResetEmailMutation, { data, loading, error }] = useSendPasswordResetEmailMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useSendPasswordResetEmailMutation(baseOptions?: Apollo.MutationHookOptions<SendPasswordResetEmailMutation, SendPasswordResetEmailMutationVariables>) {
        return Apollo.useMutation<SendPasswordResetEmailMutation, SendPasswordResetEmailMutationVariables>(SendPasswordResetEmailDocument, baseOptions);
      }
export type SendPasswordResetEmailMutationHookResult = ReturnType<typeof useSendPasswordResetEmailMutation>;
export type SendPasswordResetEmailMutationResult = Apollo.MutationResult<SendPasswordResetEmailMutation>;
export type SendPasswordResetEmailMutationOptions = Apollo.BaseMutationOptions<SendPasswordResetEmailMutation, SendPasswordResetEmailMutationVariables>;
export const ResetPasswordDocument = gql`
    mutation ResetPassword($token: String, $newPassword: String!) {
  resetPassword(input: {token: $token, newPassword: $newPassword}) {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type ResetPasswordMutationFn = Apollo.MutationFunction<ResetPasswordMutation, ResetPasswordMutationVariables>;

/**
 * __useResetPasswordMutation__
 *
 * To run a mutation, you first call `useResetPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResetPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resetPasswordMutation, { data, loading, error }] = useResetPasswordMutation({
 *   variables: {
 *      token: // value for 'token'
 *      newPassword: // value for 'newPassword'
 *   },
 * });
 */
export function useResetPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ResetPasswordMutation, ResetPasswordMutationVariables>) {
        return Apollo.useMutation<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument, baseOptions);
      }
export type ResetPasswordMutationHookResult = ReturnType<typeof useResetPasswordMutation>;
export type ResetPasswordMutationResult = Apollo.MutationResult<ResetPasswordMutation>;
export type ResetPasswordMutationOptions = Apollo.BaseMutationOptions<ResetPasswordMutation, ResetPasswordMutationVariables>;
export const UpdateUserDocument = gql`
    mutation UpdateUser($username: String!, $email: String!, $title: String, $bio: String, $avatar: String, $school: ID, $subject: ID) {
  updateUser(
    input: {username: $username, email: $email, title: $title, bio: $bio, avatar: $avatar, school: $school, subject: $subject}
  ) {
    successMessage
    user {
      id
      username
      email
      title
      bio
      avatar
      score
      created
    }
    errors {
      field
      messages
    }
  }
}
    `;
export type UpdateUserMutationFn = Apollo.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;

/**
 * __useUpdateUserMutation__
 *
 * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({
 *   variables: {
 *      username: // value for 'username'
 *      email: // value for 'email'
 *      title: // value for 'title'
 *      bio: // value for 'bio'
 *      avatar: // value for 'avatar'
 *      school: // value for 'school'
 *      subject: // value for 'subject'
 *   },
 * });
 */
export function useUpdateUserMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserMutation, UpdateUserMutationVariables>) {
        return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, baseOptions);
      }
export type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;
export type UpdateUserMutationResult = Apollo.MutationResult<UpdateUserMutation>;
export type UpdateUserMutationOptions = Apollo.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;
export const ChangePasswordDocument = gql`
    mutation ChangePassword($oldPassword: String!, $newPassword: String!) {
  changePassword(input: {oldPassword: $oldPassword, newPassword: $newPassword}) {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type ChangePasswordMutationFn = Apollo.MutationFunction<ChangePasswordMutation, ChangePasswordMutationVariables>;

/**
 * __useChangePasswordMutation__
 *
 * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangePasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({
 *   variables: {
 *      oldPassword: // value for 'oldPassword'
 *      newPassword: // value for 'newPassword'
 *   },
 * });
 */
export function useChangePasswordMutation(baseOptions?: Apollo.MutationHookOptions<ChangePasswordMutation, ChangePasswordMutationVariables>) {
        return Apollo.useMutation<ChangePasswordMutation, ChangePasswordMutationVariables>(ChangePasswordDocument, baseOptions);
      }
export type ChangePasswordMutationHookResult = ReturnType<typeof useChangePasswordMutation>;
export type ChangePasswordMutationResult = Apollo.MutationResult<ChangePasswordMutation>;
export type ChangePasswordMutationOptions = Apollo.BaseMutationOptions<ChangePasswordMutation, ChangePasswordMutationVariables>;
export const DeleteUserDocument = gql`
    mutation DeleteUser($password: String!) {
  deleteUser(input: {password: $password}) {
    successMessage
    errors {
      field
      messages
    }
  }
}
    `;
export type DeleteUserMutationFn = Apollo.MutationFunction<DeleteUserMutation, DeleteUserMutationVariables>;

/**
 * __useDeleteUserMutation__
 *
 * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({
 *   variables: {
 *      password: // value for 'password'
 *   },
 * });
 */
export function useDeleteUserMutation(baseOptions?: Apollo.MutationHookOptions<DeleteUserMutation, DeleteUserMutationVariables>) {
        return Apollo.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, baseOptions);
      }
export type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>;
export type DeleteUserMutationResult = Apollo.MutationResult<DeleteUserMutation>;
export type DeleteUserMutationOptions = Apollo.BaseMutationOptions<DeleteUserMutation, DeleteUserMutationVariables>;
export const VoteDocument = gql`
    mutation Vote($status: Int!, $comment: ID, $course: ID, $resource: ID) {
  vote(
    input: {status: $status, comment: $comment, course: $course, resource: $resource}
  ) {
    vote {
      id
      status
    }
    targetScore
    errors {
      field
      messages
    }
  }
}
    `;
export type VoteMutationFn = Apollo.MutationFunction<VoteMutation, VoteMutationVariables>;

/**
 * __useVoteMutation__
 *
 * To run a mutation, you first call `useVoteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVoteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [voteMutation, { data, loading, error }] = useVoteMutation({
 *   variables: {
 *      status: // value for 'status'
 *      comment: // value for 'comment'
 *      course: // value for 'course'
 *      resource: // value for 'resource'
 *   },
 * });
 */
export function useVoteMutation(baseOptions?: Apollo.MutationHookOptions<VoteMutation, VoteMutationVariables>) {
        return Apollo.useMutation<VoteMutation, VoteMutationVariables>(VoteDocument, baseOptions);
      }
export type VoteMutationHookResult = ReturnType<typeof useVoteMutation>;
export type VoteMutationResult = Apollo.MutationResult<VoteMutation>;
export type VoteMutationOptions = Apollo.BaseMutationOptions<VoteMutation, VoteMutationVariables>;
export const SitemapDocument = gql`
    query Sitemap {
  sitemap {
    courses {
      id
      modified
    }
    resources {
      id
      modified
    }
    schools {
      id
      modified
    }
    users {
      id
      modified
    }
  }
}
    `;

/**
 * __useSitemapQuery__
 *
 * To run a query within a React component, call `useSitemapQuery` and pass it any options that fit your needs.
 * When your component renders, `useSitemapQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSitemapQuery({
 *   variables: {
 *   },
 * });
 */
export function useSitemapQuery(baseOptions?: Apollo.QueryHookOptions<SitemapQuery, SitemapQueryVariables>) {
        return Apollo.useQuery<SitemapQuery, SitemapQueryVariables>(SitemapDocument, baseOptions);
      }
export function useSitemapLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SitemapQuery, SitemapQueryVariables>) {
          return Apollo.useLazyQuery<SitemapQuery, SitemapQueryVariables>(SitemapDocument, baseOptions);
        }
export type SitemapQueryHookResult = ReturnType<typeof useSitemapQuery>;
export type SitemapLazyQueryHookResult = ReturnType<typeof useSitemapLazyQuery>;
export type SitemapQueryResult = Apollo.QueryResult<SitemapQuery, SitemapQueryVariables>;
export const SuggestionsDocument = gql`
    query Suggestions {
  suggestions {
    ... on CourseObjectType {
      id
      name
      code
      score
      starCount
      resourceCount
      commentCount
      created
      user {
        id
        username
      }
    }
    ... on ResourceObjectType {
      id
      title
      score
      date
      starCount
      commentCount
      downloads
      created
      resourceType {
        name
      }
      user {
        id
        username
      }
      course {
        name
        code
      }
    }
    ... on CommentObjectType {
      id
      text
      attachment
      created
      score
      replyCount
      user {
        id
        username
        avatarThumbnail
      }
      commentCourse: course {
        id
        name
      }
      resource {
        id
        title
      }
    }
  }
}
    `;

/**
 * __useSuggestionsQuery__
 *
 * To run a query within a React component, call `useSuggestionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSuggestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSuggestionsQuery({
 *   variables: {
 *   },
 * });
 */
export function useSuggestionsQuery(baseOptions?: Apollo.QueryHookOptions<SuggestionsQuery, SuggestionsQueryVariables>) {
        return Apollo.useQuery<SuggestionsQuery, SuggestionsQueryVariables>(SuggestionsDocument, baseOptions);
      }
export function useSuggestionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SuggestionsQuery, SuggestionsQueryVariables>) {
          return Apollo.useLazyQuery<SuggestionsQuery, SuggestionsQueryVariables>(SuggestionsDocument, baseOptions);
        }
export type SuggestionsQueryHookResult = ReturnType<typeof useSuggestionsQuery>;
export type SuggestionsLazyQueryHookResult = ReturnType<typeof useSuggestionsLazyQuery>;
export type SuggestionsQueryResult = Apollo.QueryResult<SuggestionsQuery, SuggestionsQueryVariables>;
export const SuggestionsPreviewDocument = gql`
    query SuggestionsPreview {
  suggestionsPreview {
    ... on CourseObjectType {
      id
      name
      code
      score
      starCount
      resourceCount
      commentCount
      created
      user {
        id
        username
      }
    }
    ... on ResourceObjectType {
      id
      title
      score
      starCount
      commentCount
      downloads
      created
      resourceType {
        name
      }
      course {
        name
        code
      }
      user {
        id
        username
      }
    }
    ... on CommentObjectType {
      id
      text
      attachment
      created
      score
      replyCount
      user {
        id
        username
      }
      commentCourse: course {
        id
        name
      }
      resource {
        id
        title
      }
    }
  }
}
    `;

/**
 * __useSuggestionsPreviewQuery__
 *
 * To run a query within a React component, call `useSuggestionsPreviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useSuggestionsPreviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSuggestionsPreviewQuery({
 *   variables: {
 *   },
 * });
 */
export function useSuggestionsPreviewQuery(baseOptions?: Apollo.QueryHookOptions<SuggestionsPreviewQuery, SuggestionsPreviewQueryVariables>) {
        return Apollo.useQuery<SuggestionsPreviewQuery, SuggestionsPreviewQueryVariables>(SuggestionsPreviewDocument, baseOptions);
      }
export function useSuggestionsPreviewLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SuggestionsPreviewQuery, SuggestionsPreviewQueryVariables>) {
          return Apollo.useLazyQuery<SuggestionsPreviewQuery, SuggestionsPreviewQueryVariables>(SuggestionsPreviewDocument, baseOptions);
        }
export type SuggestionsPreviewQueryHookResult = ReturnType<typeof useSuggestionsPreviewQuery>;
export type SuggestionsPreviewLazyQueryHookResult = ReturnType<typeof useSuggestionsPreviewLazyQuery>;
export type SuggestionsPreviewQueryResult = Apollo.QueryResult<SuggestionsPreviewQuery, SuggestionsPreviewQueryVariables>;
export const DiscussionDocument = gql`
    query Discussion($course: ID, $resource: ID) {
  discussion(course: $course, resource: $resource) {
    id
    text
    attachment
    attachmentThumbnail
    created
    score
    user {
      id
      username
      avatarThumbnail
    }
    vote {
      id
      status
    }
    replyComments {
      id
      text
      attachment
      attachmentThumbnail
      created
      score
      user {
        id
        username
        avatarThumbnail
      }
      vote {
        id
        status
      }
    }
  }
}
    `;

/**
 * __useDiscussionQuery__
 *
 * To run a query within a React component, call `useDiscussionQuery` and pass it any options that fit your needs.
 * When your component renders, `useDiscussionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDiscussionQuery({
 *   variables: {
 *      course: // value for 'course'
 *      resource: // value for 'resource'
 *   },
 * });
 */
export function useDiscussionQuery(baseOptions?: Apollo.QueryHookOptions<DiscussionQuery, DiscussionQueryVariables>) {
        return Apollo.useQuery<DiscussionQuery, DiscussionQueryVariables>(DiscussionDocument, baseOptions);
      }
export function useDiscussionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DiscussionQuery, DiscussionQueryVariables>) {
          return Apollo.useLazyQuery<DiscussionQuery, DiscussionQueryVariables>(DiscussionDocument, baseOptions);
        }
export type DiscussionQueryHookResult = ReturnType<typeof useDiscussionQuery>;
export type DiscussionLazyQueryHookResult = ReturnType<typeof useDiscussionLazyQuery>;
export type DiscussionQueryResult = Apollo.QueryResult<DiscussionQuery, DiscussionQueryVariables>;