fragment activityFields on ActivityObjectType {
  id
  description
  read
  causingUser {
    slug
    username
    avatarThumbnail
  }
  comment {
    id
    thread {
      slug
    }
  }
  badgeProgress {
    badge {
      tier
    }
  }
}

fragment paginatedActivityFields on PaginatedActivityObjectType {
  page
  pages
  hasNext
  hasPrev
  count
  objects {
    ...activityFields
  }
}

query Activities($page: Int, $pageSize: Int) {
  activities(page: $page, pageSize: $pageSize) {
    ...paginatedActivityFields
  }
}

query ActivityPreview {
  activityPreview {
    ...activityFields
  }
}

mutation MarkActivityAsRead($id: ID, $read: Boolean) {
  markActivityAsRead(input: { id: $id, read: $read }) {
    errors {
      field
      messages
    }
    activity {
      ...activityFields
    }
  }
}

# Need to come up with some other name as `MarkAllActivitiesAsRead` since the the code generator creates duplicate identifiers if we use that one.
mutation GraphQLMarkAllActivitiesAsRead {
  markAllActivitiesAsRead {
    errors {
      field
      messages
    }
    activities {
      ...paginatedActivityFields
    }
  }
}

mutation CreateComment(
  $user: ID
  $text: String!
  $image: String
  $file: String
  $thread: ID
  $comment: ID
) {
  createComment(
    input: {
      user: $user
      text: $text
      image: $image
      file: $file
      thread: $thread
      comment: $comment
    }
  ) {
    successMessage
    errors {
      field
      messages
    }
    comment {
      id
      thread {
        slug
      }
    }
  }
}

mutation DeleteComment($id: ID) {
  deleteComment(input: { id: $id }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation CreateContactMessage($subject: String, $name: String, $email: String, $message: String!) {
  createContactMessage(
    input: { subject: $subject, name: $name, email: $email, message: $message }
  ) {
    successMessage
    errors {
      field
      messages
    }
  }
}

fragment threadFields on ThreadObjectType {
  id
  slug
  title
  text
  image
  imageThumbnail
  modified
  created
  score
  starred
  starCount
  commentCount
  vote {
    id
    status
  }
  user {
    id
    slug
    username
  }
}

fragment paginatedThreadFields on PaginatedThreadObjectType {
  page
  pages
  hasPrev
  hasNext
  count
  objects {
    ...threadFields
  }
}

query Threads($searchTerm: String, $ordering: String, $page: Int, $pageSize: Int) {
  threads(searchTerm: $searchTerm, ordering: $ordering, page: $page, pageSize: $pageSize) {
    ...paginatedThreadFields
  }
}

query Thread($slug: String) {
  thread(slug: $slug) {
    ...threadFields
  }
}

query ThreadComments($slug: String, $ordering: String, $page: Int, $pageSize: Int) {
  comments(thread: $slug, ordering: $ordering, page: $page, pageSize: $pageSize) {
    page
    pages
    hasNext
    hasPrev
    count
    objects {
      ...commentFields
      replyComments {
        ...commentFields
      }
    }
  }
}

mutation CreateThread($title: String!, $text: String, $image: String) {
  createThread(input: { title: $title, text: $text, image: $image }) {
    successMessage
    errors {
      field
      messages
    }
    thread {
      slug
    }
  }
}

mutation DeleteThread($id: ID) {
  deleteThread(input: { id: $id }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

query Starred($page: Int, $pageSize: Int) {
  starredThreads(page: $page, pageSize: $pageSize) {
    ...paginatedThreadFields
  }
}

mutation Star($thread: ID!) {
  star(input: { thread: $thread }) {
    starred
    errors {
      field
      messages
    }
  }
}

fragment badgeProgressFields on BadgeProgressObjectType {
  badge {
    id
    name
    description
    tier
  }
  progress
  steps
}

fragment userMeFields on UserObjectType {
  id
  slug
  username
  email
  title
  bio
  avatar
  avatarThumbnail
  score
  created
  verified
  unreadActivityCount
  fcmToken
  rank
  commentReplyEmailPermission
  threadCommentEmailPermission
  newBadgeEmailPermission
  commentReplyPushPermission
  threadCommentPushPermission
  newBadgePushPermission
  badgeProgresses {
    ...badgeProgressFields
  }
  selectedBadgeProgress {
    ...badgeProgressFields
  }
}

query UserMe {
  userMe {
    ...userMeFields
  }
}

fragment commentFields on CommentObjectType {
  id
  text
  image
  imageThumbnail
  file
  created
  score
  replyCount
  isOwn
  user {
    id
    slug
    username
    avatarThumbnail
  }
  thread {
    slug
    title
  }
}

query User($slug: String) {
  user(slug: $slug) {
    id
    username
    title
    bio
    avatar
    score
    created
    verified
    rank
    threadCount
    commentCount
    badges {
      name
      description
      tier
    }
  }
}

query UserThreads($slug: String, $page: Int, $pageSize: Int) {
  threads(user: $slug, page: $page, pageSize: $pageSize) {
    ...paginatedThreadFields
  }
}

query UserComments($slug: String, $page: Int, $pageSize: Int) {
  comments(user: $slug, page: $page, pageSize: $pageSize) {
    page
    pages
    hasNext
    hasPrev
    count
    objects {
      ...commentFields
      comment {
        thread {
          slug
          title
        }
      }
    }
  }
}

mutation Register($username: String!, $email: String!, $password: String!) {
  register(input: { username: $username, email: $email, password: $password }) {
    errors {
      field
      messages
    }
  }
  login(input: { usernameOrEmail: $username, password: $password }) {
    errors {
      field
      messages
    }
    user {
      ...userMeFields
    }
  }
}

mutation Login($usernameOrEmail: String!, $password: String!) {
  login(input: { usernameOrEmail: $usernameOrEmail, password: $password }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

# Need to come up with some other name as `Logout` since the the code generator creates duplicate identifiers if we use that one.
mutation GraphQLLogout {
  logout {
    deleted
  }
}

mutation GraphQLResendVerificationEmail {
  resendVerificationEmail {
    successMessage
    errors {
      field
      messages
    }
  }
}

# Need to come up with some other name as `MyData` since the the code generator creates duplicate identifiers if we use that one.
mutation GraphQLMyData {
  myData {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation VerifyAccount($token: String) {
  verifyAccount(input: { token: $token }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation SendPasswordResetEmail($email: String!) {
  sendPasswordResetEmail(input: { email: $email }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation ResetPassword($token: String, $newPassword: String!) {
  resetPassword(input: { token: $token, newPassword: $newPassword }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation UpdateProfile($username: String!, $title: String, $bio: String, $avatar: String) {
  updateProfile(input: { username: $username, title: $title, bio: $bio, avatar: $avatar }) {
    successMessage
    user {
      ...userMeFields
    }
    errors {
      field
      messages
    }
  }
}

mutation UpdateAccountSettings(
  $email: String!
  $commentReplyEmailPermission: Boolean
  $threadCommentEmailPermission: Boolean
  $newBadgeEmailPermission: Boolean
  $commentReplyPushPermission: Boolean
  $threadCommentPushPermission: Boolean
  $newBadgePushPermission: Boolean
) {
  updateAccountSettings(
    input: {
      email: $email
      commentReplyEmailPermission: $commentReplyEmailPermission
      threadCommentEmailPermission: $threadCommentEmailPermission
      newBadgeEmailPermission: $newBadgeEmailPermission
      commentReplyPushPermission: $commentReplyPushPermission
      threadCommentPushPermission: $threadCommentPushPermission
      newBadgePushPermission: $newBadgePushPermission
    }
  ) {
    successMessage
    user {
      ...userMeFields
    }
    errors {
      field
      messages
    }
  }
}

mutation ChangePassword($oldPassword: String!, $newPassword: String!) {
  changePassword(input: { oldPassword: $oldPassword, newPassword: $newPassword }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation DeleteUser($password: String!) {
  deleteUser(input: { password: $password }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation Vote($status: Int!, $comment: ID, $thread: ID) {
  vote(input: { status: $status, comment: $comment, thread: $thread }) {
    errors {
      field
      messages
    }
    targetScore
    vote {
      id
      status
    }
  }
}

mutation UpdateSelectedBadge($id: ID) {
  updateSelectedBadge(input: { id: $id }) {
    errors {
      field
      messages
    }
    successMessage
    badgeProgress {
      ...badgeProgressFields
    }
  }
}

query Badges {
  badges {
    name
    description
    tier
  }
}

mutation RegisterFCMToken($token: String) {
  registerFcmToken(input: { token: $token }) {
    errors {
      field
      messages
    }
    successMessage
  }
}
