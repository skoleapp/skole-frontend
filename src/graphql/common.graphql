fragment activityFields on ActivityObjectType {
  id
  description
  read
  causingUser {
    slug
    username
    avatarThumbnail
  }
  comment {
    id
    comment {
      id
      resource {
        slug
      }
      course {
        slug
      }
      school {
        slug
      }
    }
    resource {
      slug
    }
    course {
      slug
    }
    school {
      slug
    }
  }
  badgeProgress {
    user {
      slug
    }
    badge {
      name
    }
  }
}

fragment paginatedActivityFields on PaginatedActivityObjectType {
  page
  pages
  hasNext
  hasPrev
  count
  objects {
    ...activityFields
  }
}

query Activities($page: Int, $pageSize: Int) {
  activities(page: $page, pageSize: $pageSize) {
    ...paginatedActivityFields
  }
}

query ActivityPreview {
  activityPreview {
    ...activityFields
  }
}

mutation MarkActivityAsRead($id: ID, $read: Boolean) {
  markActivityAsRead(input: { id: $id, read: $read }) {
    errors {
      field
      messages
    }
    activity {
      ...activityFields
    }
  }
}

# Need to come up with some other name as `MarkAllActivitiesAsRead` since the GraphQL code generator creates duplicate identifiers if we use that one.
mutation GraphQLMarkAllActivitiesAsRead {
  markAllActivitiesAsRead {
    errors {
      field
      messages
    }
    activities {
      ...paginatedActivityFields
    }
  }
}

query AutocompleteCities {
  autocompleteCities {
    slug
    name
  }
}

mutation CreateComment(
  $user: ID
  $text: String!
  $attachment: String
  $course: ID
  $resource: ID
  $comment: ID
  $school: ID
) {
  createComment(
    input: {
      user: $user
      text: $text
      attachment: $attachment
      course: $course
      resource: $resource
      comment: $comment
      school: $school
    }
  ) {
    successMessage
    errors {
      field
      messages
    }
    comment {
      id
      course {
        slug
      }
      resource {
        slug
      }
      school {
        slug
      }
    }
  }
}

mutation DeleteComment($id: ID) {
  deleteComment(input: { id: $id }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation CreateContactMessage($subject: String, $name: String, $email: String, $message: String!) {
  createContactMessage(
    input: { subject: $subject, name: $name, email: $email, message: $message }
  ) {
    successMessage
    errors {
      field
      messages
    }
  }
}

query AutocompleteCountries {
  autocompleteCountries {
    slug
    name
  }
}

fragment courseFields on CourseObjectType {
  slug
  name
  codes
  score
  starCount
  resourceCount
  commentCount
  created
  user {
    slug
    username
  }
  courseSchool: school {
    slug
  }
}

fragment paginatedCourseFields on PaginatedCourseObjectType {
  page
  pages
  hasPrev
  hasNext
  count
  objects {
    ...courseFields
  }
}

query Courses(
  $searchTerm: String
  $school: String
  $subject: String
  $schoolType: String
  $country: String
  $city: String
  $ordering: String
  $page: Int
  $pageSize: Int
) {
  courses(
    searchTerm: $searchTerm
    school: $school
    subject: $subject
    schoolType: $schoolType
    country: $country
    city: $city
    ordering: $ordering
    page: $page
    pageSize: $pageSize
  ) {
    ...paginatedCourseFields
  }
  school(slug: $school) {
    slug
    name
  }
  subject(slug: $subject) {
    slug
    name
  }
  schoolType(slug: $schoolType) {
    slug
    name
  }
  country(slug: $country) {
    slug
    name
  }
  city(slug: $city) {
    slug
    name
  }
}

fragment resourceFields on ResourceObjectType {
  slug
  title
  score
  date
  starCount
  commentCount
  downloads
  created
  resourceType {
    name
  }
  user {
    slug
    username
  }
  resourceCourse: course {
    slug
  }
}

fragment paginatedResourceFields on PaginatedResourceObjectType {
  page
  pages
  hasNext
  hasPrev
  count
  objects {
    ...resourceFields
  }
}

query Course($slug: String, $page: Int, $pageSize: Int) {
  course(slug: $slug) {
    id
    slug
    name
    codes
    modified
    created
    score
    starred
    starCount
    commentCount
    vote {
      id
      status
    }
    subjects {
      slug
    }
    school {
      id
      slug
    }
    user {
      id
      slug
      username
    }
  }
  resources(course: $slug, page: $page, pageSize: $pageSize) {
    ...paginatedResourceFields
  }
}

query CourseSeoProps($slug: String) {
  course(slug: $slug) {
    name
    codes
  }
}

query CreateCourseAutocompleteData($school: String) {
  school(slug: $school) {
    id
    slug
    name
  }
}

query AutocompleteCourses($school: String, $name: String) {
  autocompleteCourses(school: $school, name: $name) {
    id
    slug
    name
    codes
  }
}

mutation CreateCourse($name: String!, $codes: String, $subjects: [ID], $school: ID!) {
  createCourse(input: { name: $name, codes: $codes, subjects: $subjects, school: $school }) {
    successMessage
    errors {
      field
      messages
    }
    course {
      slug
    }
  }
}

mutation DeleteCourse($id: ID) {
  deleteCourse(input: { id: $id }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

query Resource($slug: String) {
  resource(slug: $slug) {
    id
    slug
    title
    file
    date
    modified
    created
    score
    starred
    starCount
    downloads
    commentCount
    resourceType {
      name
    }
    school {
      slug
    }
    course {
      slug
    }
    user {
      id
      slug
      username
    }
    vote {
      id
      status
    }
  }
}

query ResourceSeoProps($slug: String) {
  resource(slug: $slug) {
    title
    date
  }
}

query CreateResourceAutocompleteData($school: String, $course: String) {
  school(slug: $school) {
    slug
    name
  }
  course(slug: $course) {
    id
    slug
    name
    codes
  }
}

query AutocompleteResourceTypes {
  autocompleteResourceTypes {
    id
    slug
    name
  }
}

mutation CreateResource(
  $title: String!
  $resourceType: ID!
  $date: Date
  $course: ID!
  $file: String!
) {
  createResource(
    input: { title: $title, resourceType: $resourceType, date: $date, course: $course, file: $file }
  ) {
    errors {
      field
      messages
    }
    successMessage
    resource {
      slug
    }
  }
}

mutation DeleteResource($id: ID) {
  deleteResource(input: { id: $id }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation DownloadResource($id: ID) {
  downloadResource(input: { id: $id }) {
    errors {
      field
      messages
    }
    resource {
      downloads
    }
  }
}

fragment paginatedSubjectFields on PaginatedSubjectObjectType {
  page
  pages
  hasNext
  hasPrev
  count
  objects {
    slug
    name
    courseCount
    resourceCount
  }
}

query School($slug: String, $page: Int, $pageSize: Int) {
  school(slug: $slug) {
    id
    slug
    name
    commentCount
    city {
      slug
    }
    country {
      slug
    }
    schoolType {
      slug
    }
  }
  subjects(school: $slug, page: $page, pageSize: $pageSize) {
    ...paginatedSubjectFields
  }
  courses(school: $slug, page: $page, pageSize: $pageSize) {
    ...paginatedCourseFields
  }
}

query SchoolSeoProps($slug: String) {
  school(slug: $slug) {
    name
  }
}

query AutocompleteSchools($name: String) {
  autocompleteSchools(name: $name) {
    id
    slug
    name
  }
}

query AutocompleteSchoolTypes {
  autocompleteSchoolTypes {
    slug
    name
  }
}

query Starred($page: Int, $pageSize: Int) {
  starredCourses(page: $page, pageSize: $pageSize) {
    ...paginatedCourseFields
  }
  starredResources {
    ...paginatedResourceFields
  }
}

mutation Star($course: ID, $resource: ID) {
  star(input: { course: $course, resource: $resource }) {
    starred
    errors {
      field
      messages
    }
  }
}

query AutocompleteSubjects($name: String) {
  autocompleteSubjects(name: $name) {
    id
    slug
    name
  }
}

fragment badgeProgressFields on BadgeProgressObjectType {
  badge {
    id
    name
    description
    tier
  }
  progress
  steps
}

fragment userMeFields on UserObjectType {
  id
  slug
  username
  email
  title
  bio
  avatar
  avatarThumbnail
  score
  created
  verified
  unreadActivityCount
  fcmToken
  rank
  productUpdateEmailPermission
  blogPostEmailPermission
  commentReplyEmailPermission
  courseCommentEmailPermission
  resourceCommentEmailPermission
  commentReplyPushPermission
  courseCommentPushPermission
  resourceCommentPushPermission
  school {
    id
    slug
    name
  }
  subject {
    slug
    name
  }
  badgeProgresses {
    ...badgeProgressFields
  }
  selectedBadgeProgress {
    ...badgeProgressFields
  }
}

query UserMe {
  userMe {
    ...userMeFields
  }
}

fragment commentFields on CommentObjectType {
  id
  text
  attachment
  attachmentThumbnail
  created
  score
  replyCount
  user {
    id
    slug
    username
    avatarThumbnail
  }
  course {
    slug
    name
  }
  resource {
    slug
    title
  }
  school {
    slug
    name
  }
}

query User($slug: String, $page: Int, $pageSize: Int) {
  user(slug: $slug) {
    id
    username
    title
    bio
    avatar
    score
    created
    verified
    rank
    badges {
      name
      description
      tier
    }
  }
  courses(user: $slug, page: $page, pageSize: $pageSize) {
    ...paginatedCourseFields
  }
  resources(user: $slug, page: $page, pageSize: $pageSize) {
    ...paginatedResourceFields
  }
  comments(user: $slug, page: $page, pageSize: $pageSize) {
    page
    pages
    hasNext
    hasPrev
    count
    objects {
      ...commentFields
      comment {
        course {
          slug
          name
        }
        resource {
          slug
          title
        }
        school {
          slug
          name
        }
      }
    }
  }
}

query UserSeoProps($slug: String) {
  user(slug: $slug) {
    username
  }
}

mutation Register($username: String!, $email: String!, $password: String!) {
  register(input: { username: $username, email: $email, password: $password }) {
    errors {
      field
      messages
    }
  }
  login(input: { usernameOrEmail: $username, password: $password }) {
    errors {
      field
      messages
    }
    user {
      ...userMeFields
    }
  }
}

mutation Login($usernameOrEmail: String!, $password: String!) {
  login(input: { usernameOrEmail: $usernameOrEmail, password: $password }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

# Need to come up with some other name as `Logout` since the the code generator creates duplicate
# identifiers for non-input mutations if we use that one.
mutation GraphQLLogout {
  logout {
    deleted
  }
}

mutation GraphQLResendVerificationEmail {
  resendVerificationEmail {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation GraphQLMyData {
  myData {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation VerifyAccount($token: String) {
  verifyAccount(input: { token: $token }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation SendPasswordResetEmail($email: String!) {
  sendPasswordResetEmail(input: { email: $email }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation ResetPassword($token: String, $newPassword: String!) {
  resetPassword(input: { token: $token, newPassword: $newPassword }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation UpdateProfile($username: String!, $title: String, $bio: String, $avatar: String) {
  updateProfile(input: { username: $username, title: $title, bio: $bio, avatar: $avatar }) {
    successMessage
    user {
      ...userMeFields
    }
    errors {
      field
      messages
    }
  }
}

mutation UpdateAccountSettings(
  $email: String!
  $school: ID
  $subject: ID
  $productUpdateEmailPermission: Boolean
  $blogPostEmailPermission: Boolean
  $commentReplyEmailPermission: Boolean
  $courseCommentEmailPermission: Boolean
  $resourceCommentEmailPermission: Boolean
  $commentReplyPushPermission: Boolean
  $courseCommentPushPermission: Boolean
  $resourceCommentPushPermission: Boolean
) {
  updateAccountSettings(
    input: {
      email: $email
      school: $school
      subject: $subject
      productUpdateEmailPermission: $productUpdateEmailPermission
      blogPostEmailPermission: $blogPostEmailPermission
      commentReplyEmailPermission: $commentReplyEmailPermission
      courseCommentEmailPermission: $courseCommentEmailPermission
      resourceCommentEmailPermission: $resourceCommentEmailPermission
      commentReplyPushPermission: $commentReplyPushPermission
      courseCommentPushPermission: $courseCommentPushPermission
      resourceCommentPushPermission: $resourceCommentPushPermission
    }
  ) {
    successMessage
    user {
      ...userMeFields
    }
    errors {
      field
      messages
    }
  }
}

mutation ChangePassword($oldPassword: String!, $newPassword: String!) {
  changePassword(input: { oldPassword: $oldPassword, newPassword: $newPassword }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation DeleteUser($password: String!) {
  deleteUser(input: { password: $password }) {
    successMessage
    errors {
      field
      messages
    }
  }
}

mutation Vote($status: Int!, $comment: ID, $course: ID, $resource: ID) {
  vote(input: { status: $status, comment: $comment, course: $course, resource: $resource }) {
    errors {
      field
      messages
    }
    targetScore
    vote {
      id
      status
    }
  }
}

query Sitemap {
  sitemap {
    courses {
      slug
      modified
    }
    resources {
      slug
      modified
    }
    schools {
      slug
      modified
    }
    users {
      slug
      modified
    }
  }
}

fragment suggestionFields on SuggestionsUnion {
  ... on CourseObjectType {
    ...courseFields
  }
  ... on ResourceObjectType {
    ...resourceFields
  }
  ... on CommentObjectType {
    ...commentFields
  }
}

query Suggestions {
  suggestions {
    ...suggestionFields
  }
}

query SuggestionsPreview {
  suggestionsPreview {
    ...suggestionFields
  }
}

query Discussion($course: ID, $resource: ID, $school: ID) {
  discussion(course: $course, resource: $resource, school: $school) {
    id
    text
    attachment
    attachmentThumbnail
    created
    score
    user {
      id
      slug
      username
      avatarThumbnail
    }
    vote {
      id
      status
    }
    course {
      slug
    }
    resource {
      slug
    }
    school {
      slug
    }
    replyComments {
      id
      text
      attachment
      attachmentThumbnail
      created
      score
      user {
        id
        slug
        username
        avatarThumbnail
      }
      vote {
        id
        status
      }
    }
  }
}

query DiscussionSuggestions {
  discussionSuggestions {
    ... on CourseObjectType {
      id
      slug
      courseName: name
      codes
      __typename
    }
    ... on ResourceObjectType {
      id
      slug
      title
      __typename
      course {
        name
      }
    }
    ... on SchoolObjectType {
      id
      slug
      name
      __typename
    }
  }
}

mutation CreateEmailSubscription($email: String!) {
  createEmailSubscription(input: { email: $email }) {
    errors {
      field
      messages
    }
    successMessage
  }
}

query EmailSubscription($token: String!) {
  emailSubscription(token: $token) {
    email
    productUpdates
    blogPosts
  }
}

mutation UpdateEmailSubscription($token: String, $productUpdates: Boolean, $blogPosts: Boolean) {
  updateEmailSubscription(
    input: { token: $token, productUpdates: $productUpdates, blogPosts: $blogPosts }
  ) {
    errors {
      field
      messages
    }
    successMessage
    emailSubscription {
      email
      productUpdates
      blogPosts
    }
  }
}

mutation UpdateSelectedBadge($id: ID) {
  updateSelectedBadge(input: { id: $id }) {
    errors {
      field
      messages
    }
    successMessage
    badgeProgress {
      ...badgeProgressFields
    }
  }
}

query Badges {
  badges {
    name
    description
    tier
  }
}

mutation RegisterFCMToken($token: String) {
  registerFcmToken(input: { token: $token }) {
    errors {
      field
      messages
    }
    successMessage
  }
}
